<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;!-- Internet permission for API calls --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;&#10;    &lt;!-- Location permissions --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.WhetherOrNot&quot;&#10;        android:usesCleartextTraffic=&quot;true&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.WhetherOrNot&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.CurrentWeatherDetailActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.WhetherOrNot&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.DailyWeatherDetailActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.WhetherOrNot&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.SavedLocationsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.WhetherOrNot&quot; /&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;!-- Internet permission for API calls --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;&#10;    &lt;!-- Location permissions --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Umbrella&quot;&#10;        android:usesCleartextTraffic=&quot;true&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.Umbrella&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.CurrentWeatherDetailActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.Umbrella&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.DailyWeatherDetailActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.Umbrella&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.SavedLocationsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.Umbrella&quot; /&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/whetherornot/CurrentWeatherDetailActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/whetherornot/CurrentWeatherDetailActivity.kt" />
              <option name="originalContent" value="package com.example.whetherornot&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import com.example.whetherornot.data.model.CurrentWeather&#10;import com.example.whetherornot.ui.theme.WhetherOrNotTheme&#10;import com.google.gson.Gson&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class CurrentWeatherDetailActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        val currentWeatherJson = intent.getStringExtra(&quot;current_weather_json&quot;)&#10;        val location = intent.getStringExtra(&quot;location&quot;) ?: &quot;Unknown Location&quot;&#10;&#10;        setContent {&#10;            WhetherOrNotTheme {&#10;                CurrentWeatherDetailScreen(&#10;                    currentWeatherJson = currentWeatherJson,&#10;                    location = location,&#10;                    onBackClick = { finish() }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CurrentWeatherDetailScreen(&#10;    currentWeatherJson: String?,&#10;    location: String,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    val currentWeather = remember(currentWeatherJson) {&#10;        currentWeatherJson?.let {&#10;            try {&#10;                Gson().fromJson(it, CurrentWeather::class.java)&#10;            } catch (e: Exception) {&#10;                null&#10;            }&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState())&#10;    ) {&#10;        // Top Bar&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 24.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onBackClick) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;&#10;                )&#10;            }&#10;            Text(&#10;                text = &quot;Current Weather Details&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(start = 8.dp)&#10;            )&#10;        }&#10;&#10;        currentWeather?.let { weather -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clip(RoundedCornerShape(16.dp)),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .padding(24.dp)&#10;                        .fillMaxWidth(),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // Location and current day&#10;                    Text(&#10;                        text = location,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    val currentDate = Date(weather.dt * 1000)&#10;                    val dayFormatter = SimpleDateFormat(&quot;EEEE, MMMM d, yyyy&quot;, Locale.getDefault())&#10;                    Text(&#10;                        text = dayFormatter.format(currentDate),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        modifier = Modifier.padding(bottom = 16.dp)&#10;                    )&#10;&#10;                    // Weather icon and description&#10;                    weather.weather.firstOrNull()?.let { weatherInfo -&gt;&#10;                        AsyncImage(&#10;                            model = &quot;https://openweathermap.org/img/wn/${weatherInfo.icon}@4x.png&quot;,&#10;                            contentDescription = weatherInfo.description,&#10;                            modifier = Modifier&#10;                                .size(120.dp)&#10;                                .padding(bottom = 8.dp)&#10;                        )&#10;                        Text(&#10;                            text = weatherInfo.description.replaceFirstChar {&#10;                                if (it.isLowerCase()) it.titlecase(Locale.getDefault()) else it.toString()&#10;                            },&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            modifier = Modifier.padding(bottom = 16.dp)&#10;                        )&#10;                    }&#10;&#10;                    // Temperature&#10;                    Text(&#10;                        text = &quot;${weather.temp.toInt()}°F&quot;,&#10;                        style = MaterialTheme.typography.displayLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;Feels like ${weather.feelsLike.toInt()}°F&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        modifier = Modifier.padding(bottom = 24.dp)&#10;                    )&#10;&#10;                    // Weather details grid&#10;                    Column(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                    ) {&#10;                        // Wind information&#10;                        WeatherDetailRow(&#10;                            label = &quot;Wind&quot;,&#10;                            value = &quot;${weather.windSpeed.toInt()} mph&quot;,&#10;                            extra = {&#10;                                Text(&#10;                                    text = &quot;↑&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge,&#10;                                    modifier = Modifier.graphicsLayer {&#10;                                        rotationZ = weather.windDeg.toFloat()&#10;                                    }&#10;                                )&#10;                            }&#10;                        )&#10;&#10;                        weather.windGust?.let { gust -&gt;&#10;                            WeatherDetailRow(&#10;                                label = &quot;Wind Gust&quot;,&#10;                                value = &quot;${gust.toInt()} mph&quot;&#10;                            )&#10;                        }&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Humidity&quot;,&#10;                            value = &quot;${weather.humidity}%&quot;&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Pressure&quot;,&#10;                            value = &quot;${weather.pressure} hPa&quot;&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Visibility&quot;,&#10;                            value = &quot;${(weather.visibility / 1609.344).toInt()} miles&quot;&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;UV Index&quot;,&#10;                            value = &quot;${weather.uvi}&quot;&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Dew Point&quot;,&#10;                            value = &quot;${weather.dewPoint.toInt()}°F&quot;&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Cloud Cover&quot;,&#10;                            value = &quot;${weather.clouds}%&quot;&#10;                        )&#10;&#10;                        // Sunrise and Sunset&#10;                        val timeFormatter = SimpleDateFormat(&quot;h:mm a&quot;, Locale.getDefault())&#10;                        WeatherDetailRow(&#10;                            label = &quot;Sunrise&quot;,&#10;                            value = timeFormatter.format(Date(weather.sunrise * 1000))&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Sunset&quot;,&#10;                            value = timeFormatter.format(Date(weather.sunset * 1000))&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        } ?: run {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.errorContainer&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;Unable to load weather details&quot;,&#10;                    modifier = Modifier.padding(16.dp),&#10;                    color = MaterialTheme.colorScheme.onErrorContainer&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WeatherDetailRow(&#10;    label: String,&#10;    value: String,&#10;    extra: @Composable (() -&gt; Unit)? = null&#10;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;        ) {&#10;            Text(&#10;                text = value,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;            extra?.invoke()&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.whetherornot&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import com.example.whetherornot.data.model.CurrentWeather&#10;import com.example.whetherornot.ui.theme.UmbrellaTheme&#10;import com.google.gson.Gson&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class CurrentWeatherDetailActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        val currentWeatherJson = intent.getStringExtra(&quot;current_weather_json&quot;)&#10;        val location = intent.getStringExtra(&quot;location&quot;) ?: &quot;Unknown Location&quot;&#10;&#10;        setContent {&#10;            UmbrellaTheme {&#10;                CurrentWeatherDetailScreen(&#10;                    currentWeatherJson = currentWeatherJson,&#10;                    location = location,&#10;                    onBackClick = { finish() }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CurrentWeatherDetailScreen(&#10;    currentWeatherJson: String?,&#10;    location: String,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    val currentWeather = remember(currentWeatherJson) {&#10;        currentWeatherJson?.let {&#10;            try {&#10;                Gson().fromJson(it, CurrentWeather::class.java)&#10;            } catch (e: Exception) {&#10;                null&#10;            }&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState())&#10;    ) {&#10;        // Top Bar&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 24.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onBackClick) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;&#10;                )&#10;            }&#10;            Text(&#10;                text = &quot;Current Weather Details&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(start = 8.dp)&#10;            )&#10;        }&#10;&#10;        currentWeather?.let { weather -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clip(RoundedCornerShape(16.dp)),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .padding(24.dp)&#10;                        .fillMaxWidth(),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // Location and current day&#10;                    Text(&#10;                        text = location,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    val currentDate = Date(weather.dt * 1000)&#10;                    val dayFormatter = SimpleDateFormat(&quot;EEEE, MMMM d, yyyy&quot;, Locale.getDefault())&#10;                    Text(&#10;                        text = dayFormatter.format(currentDate),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        modifier = Modifier.padding(bottom = 16.dp)&#10;                    )&#10;&#10;                    // Weather icon and description&#10;                    weather.weather.firstOrNull()?.let { weatherInfo -&gt;&#10;                        AsyncImage(&#10;                            model = &quot;https://openweathermap.org/img/wn/${weatherInfo.icon}@4x.png&quot;,&#10;                            contentDescription = weatherInfo.description,&#10;                            modifier = Modifier&#10;                                .size(120.dp)&#10;                                .padding(bottom = 8.dp)&#10;                        )&#10;                        Text(&#10;                            text = weatherInfo.description.replaceFirstChar {&#10;                                if (it.isLowerCase()) it.titlecase(Locale.getDefault()) else it.toString()&#10;                            },&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            modifier = Modifier.padding(bottom = 16.dp)&#10;                        )&#10;                    }&#10;&#10;                    // Temperature&#10;                    Text(&#10;                        text = &quot;${weather.temp.toInt()}°F&quot;,&#10;                        style = MaterialTheme.typography.displayLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;Feels like ${weather.feelsLike.toInt()}°F&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        modifier = Modifier.padding(bottom = 24.dp)&#10;                    )&#10;&#10;                    // Weather details grid&#10;                    Column(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                    ) {&#10;                        // Wind information&#10;                        WeatherDetailRow(&#10;                            label = &quot;Wind&quot;,&#10;                            value = &quot;${weather.windSpeed.toInt()} mph&quot;,&#10;                            extra = {&#10;                                Text(&#10;                                    text = &quot;↑&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge,&#10;                                    modifier = Modifier.graphicsLayer {&#10;                                        rotationZ = weather.windDeg.toFloat()&#10;                                    }&#10;                                )&#10;                            }&#10;                        )&#10;&#10;                        weather.windGust?.let { gust -&gt;&#10;                            WeatherDetailRow(&#10;                                label = &quot;Wind Gust&quot;,&#10;                                value = &quot;${gust.toInt()} mph&quot;&#10;                            )&#10;                        }&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Humidity&quot;,&#10;                            value = &quot;${weather.humidity}%&quot;&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Pressure&quot;,&#10;                            value = &quot;${weather.pressure} hPa&quot;&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Visibility&quot;,&#10;                            value = &quot;${(weather.visibility / 1609.344).toInt()} miles&quot;&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;UV Index&quot;,&#10;                            value = &quot;${weather.uvi}&quot;&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Dew Point&quot;,&#10;                            value = &quot;${weather.dewPoint.toInt()}°F&quot;&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Cloud Cover&quot;,&#10;                            value = &quot;${weather.clouds}%&quot;&#10;                        )&#10;&#10;                        // Sunrise and Sunset&#10;                        val timeFormatter = SimpleDateFormat(&quot;h:mm a&quot;, Locale.getDefault())&#10;                        WeatherDetailRow(&#10;                            label = &quot;Sunrise&quot;,&#10;                            value = timeFormatter.format(Date(weather.sunrise * 1000))&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Sunset&quot;,&#10;                            value = timeFormatter.format(Date(weather.sunset * 1000))&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        } ?: run {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.errorContainer&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;Unable to load weather details&quot;,&#10;                    modifier = Modifier.padding(16.dp),&#10;                    color = MaterialTheme.colorScheme.onErrorContainer&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WeatherDetailRow(&#10;    label: String,&#10;    value: String,&#10;    extra: @Composable (() -&gt; Unit)? = null&#10;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;        ) {&#10;            Text(&#10;                text = value,&#10;                style = MaterialTheme.typography.bodyMedium&#10;            )&#10;            extra?.invoke()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/whetherornot/DailyWeatherDetailActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/whetherornot/DailyWeatherDetailActivity.kt" />
              <option name="originalContent" value="package com.example.whetherornot&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import com.example.whetherornot.data.model.DailyWeather&#10;import com.example.whetherornot.ui.theme.WhetherOrNotTheme&#10;import com.google.gson.Gson&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class DailyWeatherDetailActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        val dailyWeatherJson = intent.getStringExtra(&quot;daily_weather_json&quot;)&#10;        val location = intent.getStringExtra(&quot;location&quot;) ?: &quot;Unknown Location&quot;&#10;&#10;        setContent {&#10;            WhetherOrNotTheme {&#10;                DailyWeatherDetailScreen(&#10;                    dailyWeatherJson = dailyWeatherJson,&#10;                    location = location,&#10;                    onBackClick = { finish() }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun DailyWeatherDetailScreen(&#10;    dailyWeatherJson: String?,&#10;    location: String,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    val dailyWeather = remember(dailyWeatherJson) {&#10;        dailyWeatherJson?.let {&#10;            try {&#10;                Gson().fromJson(it, DailyWeather::class.java)&#10;            } catch (e: Exception) {&#10;                null&#10;            }&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState())&#10;    ) {&#10;        // Top Bar&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 24.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onBackClick) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;&#10;                )&#10;            }&#10;            Text(&#10;                text = &quot;Daily Weather Details&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(start = 8.dp)&#10;            )&#10;        }&#10;&#10;        dailyWeather?.let { weather -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clip(RoundedCornerShape(16.dp)),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .padding(24.dp)&#10;                        .fillMaxWidth(),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // Location and date&#10;                    Text(&#10;                        text = location,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    val forecastDate = Date(weather.dt * 1000)&#10;                    val dayFormatter = SimpleDateFormat(&quot;EEEE, MMMM d, yyyy&quot;, Locale.getDefault())&#10;                    Text(&#10;                        text = dayFormatter.format(forecastDate),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        modifier = Modifier.padding(bottom = 16.dp)&#10;                    )&#10;&#10;                    // Weather icon and description&#10;                    weather.weather.firstOrNull()?.let { weatherInfo -&gt;&#10;                        AsyncImage(&#10;                            model = &quot;https://openweathermap.org/img/wn/${weatherInfo.icon}@4x.png&quot;,&#10;                            contentDescription = weatherInfo.description,&#10;                            modifier = Modifier&#10;                                .size(120.dp)&#10;                                .padding(bottom = 8.dp)&#10;                        )&#10;                        Text(&#10;                            text = weatherInfo.description.replaceFirstChar {&#10;                                if (it.isLowerCase()) it.titlecase(Locale.getDefault()) else it.toString()&#10;                            },&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            modifier = Modifier.padding(bottom = 8.dp)&#10;                        )&#10;                    }&#10;&#10;                    // Summary if available&#10;                    weather.summary?.let { summary -&gt;&#10;                        Text(&#10;                            text = summary,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            modifier = Modifier.padding(bottom = 16.dp)&#10;                        )&#10;                    }&#10;&#10;                    // Temperature range&#10;                    Row(&#10;                        horizontalArrangement = Arrangement.spacedBy(16.dp),&#10;                        modifier = Modifier.padding(bottom = 24.dp)&#10;                    ) {&#10;                        Card(&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = MaterialTheme.colorScheme.surface&#10;                            )&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier.padding(16.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;High&quot;,&#10;                                    style = MaterialTheme.typography.labelMedium,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                                Text(&#10;                                    text = &quot;${weather.temp.max.toInt()}°F&quot;,&#10;                                    style = MaterialTheme.typography.headlineMedium,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        Card(&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = MaterialTheme.colorScheme.surface&#10;                            )&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier.padding(16.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;Low&quot;,&#10;                                    style = MaterialTheme.typography.labelMedium,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                                Text(&#10;                                    text = &quot;${weather.temp.min.toInt()}°F&quot;,&#10;                                    style = MaterialTheme.typography.headlineMedium,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Detailed temperature breakdown&#10;                    Text(&#10;                        text = &quot;Temperature Throughout Day&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 12.dp)&#10;                    )&#10;&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(bottom = 24.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        WeatherDetailRow(&quot;Morning&quot;, &quot;${weather.temp.morn.toInt()}°F&quot;)&#10;                        WeatherDetailRow(&quot;Day&quot;, &quot;${weather.temp.day.toInt()}°F&quot;)&#10;                        WeatherDetailRow(&quot;Evening&quot;, &quot;${weather.temp.eve.toInt()}°F&quot;)&#10;                        WeatherDetailRow(&quot;Night&quot;, &quot;${weather.temp.night.toInt()}°F&quot;)&#10;                    }&#10;&#10;                    // Feels like temperatures&#10;                    Text(&#10;                        text = &quot;Feels Like Temperatures&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 12.dp)&#10;                    )&#10;&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(bottom = 24.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        WeatherDetailRow(&quot;Morning&quot;, &quot;${weather.feelsLike.morn.toInt()}°F&quot;)&#10;                        WeatherDetailRow(&quot;Day&quot;, &quot;${weather.feelsLike.day.toInt()}°F&quot;)&#10;                        WeatherDetailRow(&quot;Evening&quot;, &quot;${weather.feelsLike.eve.toInt()}°F&quot;)&#10;                        WeatherDetailRow(&quot;Night&quot;, &quot;${weather.feelsLike.night.toInt()}°F&quot;)&#10;                    }&#10;&#10;                    // Weather details&#10;                    Text(&#10;                        text = &quot;Weather Details&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 12.dp)&#10;                    )&#10;&#10;                    Column(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        // Wind information&#10;                        WeatherDetailRow(&#10;                            label = &quot;Wind&quot;,&#10;                            value = &quot;${weather.windSpeed.toInt()} mph&quot;,&#10;                            extra = {&#10;                                Text(&#10;                                    text = &quot;↑&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge,&#10;                                    modifier = Modifier.graphicsLayer {&#10;                                        rotationZ = weather.windDeg.toFloat()&#10;                                    }&#10;                                )&#10;                            }&#10;                        )&#10;&#10;                        weather.windGust?.let { gust -&gt;&#10;                            WeatherDetailRow(&#10;                                label = &quot;Wind Gust&quot;,&#10;                                value = &quot;${gust.toInt()} mph&quot;&#10;                            )&#10;                        }&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Humidity&quot;,&#10;                            value = &quot;${weather.humidity}%&quot;&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Pressure&quot;,&#10;                            value = &quot;${weather.pressure} hPa&quot;&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;UV Index&quot;,&#10;                            value = &quot;${weather.uvi}&quot;&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Dew Point&quot;,&#10;                            value = &quot;${weather.dewPoint.toInt()}°F&quot;&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Cloud Cover&quot;,&#10;                            value = &quot;${weather.clouds}%&quot;&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Chance of Rain&quot;,&#10;                            value = &quot;${(weather.pop * 100).toInt()}%&quot;&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Moon Phase&quot;,&#10;                            value = &quot;${(weather.moonPhase * 100).toInt()}%&quot;&#10;                        )&#10;&#10;                        // Sunrise and Sunset&#10;                        val timeFormatter = SimpleDateFormat(&quot;h:mm a&quot;, Locale.getDefault())&#10;                        WeatherDetailRow(&#10;                            label = &quot;Sunrise&quot;,&#10;                            value = timeFormatter.format(Date(weather.sunrise * 1000))&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Sunset&quot;,&#10;                            value = timeFormatter.format(Date(weather.sunset * 1000))&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Moonrise&quot;,&#10;                            value = timeFormatter.format(Date(weather.moonrise * 1000))&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Moonset&quot;,&#10;                            value = timeFormatter.format(Date(weather.moonset * 1000))&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        } ?: run {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.errorContainer&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;Unable to load weather details&quot;,&#10;                    modifier = Modifier.padding(16.dp),&#10;                    color = MaterialTheme.colorScheme.onErrorContainer&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.whetherornot&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import com.example.whetherornot.data.model.DailyWeather&#10;import com.example.whetherornot.ui.theme.UmbrellaTheme&#10;import com.google.gson.Gson&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class DailyWeatherDetailActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        val dailyWeatherJson = intent.getStringExtra(&quot;daily_weather_json&quot;)&#10;        val location = intent.getStringExtra(&quot;location&quot;) ?: &quot;Unknown Location&quot;&#10;&#10;        setContent {&#10;            UmbrellaTheme {&#10;                DailyWeatherDetailScreen(&#10;                    dailyWeatherJson = dailyWeatherJson,&#10;                    location = location,&#10;                    onBackClick = { finish() }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun DailyWeatherDetailScreen(&#10;    dailyWeatherJson: String?,&#10;    location: String,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    val dailyWeather = remember(dailyWeatherJson) {&#10;        dailyWeatherJson?.let {&#10;            try {&#10;                Gson().fromJson(it, DailyWeather::class.java)&#10;            } catch (e: Exception) {&#10;                null&#10;            }&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState())&#10;    ) {&#10;        // Top Bar&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 24.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onBackClick) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;&#10;                )&#10;            }&#10;            Text(&#10;                text = &quot;Daily Weather Details&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(start = 8.dp)&#10;            )&#10;        }&#10;&#10;        dailyWeather?.let { weather -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clip(RoundedCornerShape(16.dp)),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .padding(24.dp)&#10;                        .fillMaxWidth(),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // Location and date&#10;                    Text(&#10;                        text = location,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    val forecastDate = Date(weather.dt * 1000)&#10;                    val dayFormatter = SimpleDateFormat(&quot;EEEE, MMMM d, yyyy&quot;, Locale.getDefault())&#10;                    Text(&#10;                        text = dayFormatter.format(forecastDate),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        modifier = Modifier.padding(bottom = 16.dp)&#10;                    )&#10;&#10;                    // Weather icon and description&#10;                    weather.weather.firstOrNull()?.let { weatherInfo -&gt;&#10;                        AsyncImage(&#10;                            model = &quot;https://openweathermap.org/img/wn/${weatherInfo.icon}@4x.png&quot;,&#10;                            contentDescription = weatherInfo.description,&#10;                            modifier = Modifier&#10;                                .size(120.dp)&#10;                                .padding(bottom = 8.dp)&#10;                        )&#10;                        Text(&#10;                            text = weatherInfo.description.replaceFirstChar {&#10;                                if (it.isLowerCase()) it.titlecase(Locale.getDefault()) else it.toString()&#10;                            },&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            modifier = Modifier.padding(bottom = 8.dp)&#10;                        )&#10;                    }&#10;&#10;                    // Summary if available&#10;                    weather.summary?.let { summary -&gt;&#10;                        Text(&#10;                            text = summary,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            modifier = Modifier.padding(bottom = 16.dp)&#10;                        )&#10;                    }&#10;&#10;                    // Temperature range&#10;                    Row(&#10;                        horizontalArrangement = Arrangement.spacedBy(16.dp),&#10;                        modifier = Modifier.padding(bottom = 24.dp)&#10;                    ) {&#10;                        Card(&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = MaterialTheme.colorScheme.surface&#10;                            )&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier.padding(16.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;High&quot;,&#10;                                    style = MaterialTheme.typography.labelMedium,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                                Text(&#10;                                    text = &quot;${weather.temp.max.toInt()}°F&quot;,&#10;                                    style = MaterialTheme.typography.headlineMedium,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        Card(&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = MaterialTheme.colorScheme.surface&#10;                            )&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier.padding(16.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;Low&quot;,&#10;                                    style = MaterialTheme.typography.labelMedium,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                                Text(&#10;                                    text = &quot;${weather.temp.min.toInt()}°F&quot;,&#10;                                    style = MaterialTheme.typography.headlineMedium,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Detailed temperature breakdown&#10;                    Text(&#10;                        text = &quot;Temperature Throughout Day&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 12.dp)&#10;                    )&#10;&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(bottom = 24.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        WeatherDetailRow(&quot;Morning&quot;, &quot;${weather.temp.morn.toInt()}°F&quot;)&#10;                        WeatherDetailRow(&quot;Day&quot;, &quot;${weather.temp.day.toInt()}°F&quot;)&#10;                        WeatherDetailRow(&quot;Evening&quot;, &quot;${weather.temp.eve.toInt()}°F&quot;)&#10;                        WeatherDetailRow(&quot;Night&quot;, &quot;${weather.temp.night.toInt()}°F&quot;)&#10;                    }&#10;&#10;                    // Feels like temperatures&#10;                    Text(&#10;                        text = &quot;Feels Like Temperatures&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 12.dp)&#10;                    )&#10;&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(bottom = 24.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        WeatherDetailRow(&quot;Morning&quot;, &quot;${weather.feelsLike.morn.toInt()}°F&quot;)&#10;                        WeatherDetailRow(&quot;Day&quot;, &quot;${weather.feelsLike.day.toInt()}°F&quot;)&#10;                        WeatherDetailRow(&quot;Evening&quot;, &quot;${weather.feelsLike.eve.toInt()}°F&quot;)&#10;                        WeatherDetailRow(&quot;Night&quot;, &quot;${weather.feelsLike.night.toInt()}°F&quot;)&#10;                    }&#10;&#10;                    // Weather details&#10;                    Text(&#10;                        text = &quot;Weather Details&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 12.dp)&#10;                    )&#10;&#10;                    Column(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        // Wind information&#10;                        WeatherDetailRow(&#10;                            label = &quot;Wind&quot;,&#10;                            value = &quot;${weather.windSpeed.toInt()} mph&quot;,&#10;                            extra = {&#10;                                Text(&#10;                                    text = &quot;↑&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge,&#10;                                    modifier = Modifier.graphicsLayer {&#10;                                        rotationZ = weather.windDeg.toFloat()&#10;                                    }&#10;                                )&#10;                            }&#10;                        )&#10;&#10;                        weather.windGust?.let { gust -&gt;&#10;                            WeatherDetailRow(&#10;                                label = &quot;Wind Gust&quot;,&#10;                                value = &quot;${gust.toInt()} mph&quot;&#10;                            )&#10;                        }&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Humidity&quot;,&#10;                            value = &quot;${weather.humidity}%&quot;&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Pressure&quot;,&#10;                            value = &quot;${weather.pressure} hPa&quot;&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;UV Index&quot;,&#10;                            value = &quot;${weather.uvi}&quot;&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Dew Point&quot;,&#10;                            value = &quot;${weather.dewPoint.toInt()}°F&quot;&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Cloud Cover&quot;,&#10;                            value = &quot;${weather.clouds}%&quot;&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Chance of Rain&quot;,&#10;                            value = &quot;${(weather.pop * 100).toInt()}%&quot;&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Moon Phase&quot;,&#10;                            value = &quot;${(weather.moonPhase * 100).toInt()}%&quot;&#10;                        )&#10;&#10;                        // Sunrise and Sunset&#10;                        val timeFormatter = SimpleDateFormat(&quot;h:mm a&quot;, Locale.getDefault())&#10;                        WeatherDetailRow(&#10;                            label = &quot;Sunrise&quot;,&#10;                            value = timeFormatter.format(Date(weather.sunrise * 1000))&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Sunset&quot;,&#10;                            value = timeFormatter.format(Date(weather.sunset * 1000))&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Moonrise&quot;,&#10;                            value = timeFormatter.format(Date(weather.moonrise * 1000))&#10;                        )&#10;&#10;                        WeatherDetailRow(&#10;                            label = &quot;Moonset&quot;,&#10;                            value = timeFormatter.format(Date(weather.moonset * 1000))&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        } ?: run {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.errorContainer&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;Unable to load weather details&quot;,&#10;                    modifier = Modifier.padding(16.dp),&#10;                    color = MaterialTheme.colorScheme.onErrorContainer&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/whetherornot/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/whetherornot/MainActivity.kt" />
              <option name="originalContent" value="package com.example.whetherornot&#10;&#10;import android.Manifest&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ExpandLess&#10;import androidx.compose.material.icons.filled.ExpandMore&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import com.example.whetherornot.ui.theme.WhetherOrNotTheme&#10;import androidx.compose.ui.Alignment&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import com.example.whetherornot.data.repository.KotlinWeatherRepository&#10;import com.example.whetherornot.data.repository.JavaWeatherRepository&#10;import com.example.whetherornot.data.repository.LocationRepository&#10;import com.example.whetherornot.data.model.WeatherResponse&#10;import com.example.whetherornot.data.model.ZipCodeResponse&#10;import com.example.whetherornot.utils.LocationManager&#10;import com.google.gson.Gson&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            WhetherOrNotTheme {&#10;                WeatherApp()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun WeatherApp() {&#10;    var selectedTabIndex by remember { mutableIntStateOf(0) }&#10;    val tabTitles = listOf(&quot;Kotlin Weather&quot;, &quot;Java Weather&quot;)&#10;&#10;    // Shared state for location data between tabs&#10;    var sharedZipCodeInput by remember { mutableStateOf(&quot;&quot;) }&#10;    var sharedCurrentLocation by remember { mutableStateOf(&quot;Loading location...&quot;) }&#10;    var sharedCurrentLatitude by remember { mutableStateOf(46.8384) } // Default: Duluth, MN&#10;    var sharedCurrentLongitude by remember { mutableStateOf(-92.1800) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            CenterAlignedTopAppBar(&#10;                title = {&#10;                    Text(&#10;                        text = &quot;Whether Or Not&quot;,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                colors = TopAppBarDefaults.centerAlignedTopAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                )&#10;            )&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;        ) {&#10;            TabRow(&#10;                selectedTabIndex = selectedTabIndex,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                tabTitles.forEachIndexed { index, title -&gt;&#10;                    Tab(&#10;                        selected = selectedTabIndex == index,&#10;                        onClick = { selectedTabIndex = index },&#10;                        text = {&#10;                            Text(&#10;                                text = title,&#10;                                fontWeight = if (selectedTabIndex == index) FontWeight.Bold else FontWeight.Normal&#10;                            )&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Content area for each tab - pass shared state&#10;            when (selectedTabIndex) {&#10;                0 -&gt; KotlinWeatherContent(&#10;                    sharedZipCodeInput = sharedZipCodeInput,&#10;                    onZipCodeInputChange = { sharedZipCodeInput = it },&#10;                    sharedCurrentLocation = sharedCurrentLocation,&#10;                    onCurrentLocationChange = { sharedCurrentLocation = it },&#10;                    sharedCurrentLatitude = sharedCurrentLatitude,&#10;                    onCurrentLatitudeChange = { sharedCurrentLatitude = it },&#10;                    sharedCurrentLongitude = sharedCurrentLongitude,&#10;                    onCurrentLongitudeChange = { sharedCurrentLongitude = it }&#10;                )&#10;                1 -&gt; JavaWeatherContent(&#10;                    sharedZipCodeInput = sharedZipCodeInput,&#10;                    onZipCodeInputChange = { sharedZipCodeInput = it },&#10;                    sharedCurrentLocation = sharedCurrentLocation,&#10;                    onCurrentLocationChange = { sharedCurrentLocation = it },&#10;                    sharedCurrentLatitude = sharedCurrentLatitude,&#10;                    onCurrentLatitudeChange = { sharedCurrentLatitude = it },&#10;                    sharedCurrentLongitude = sharedCurrentLongitude,&#10;                    onCurrentLongitudeChange = { sharedCurrentLongitude = it }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun KotlinWeatherContent(&#10;    sharedZipCodeInput: String,&#10;    onZipCodeInputChange: (String) -&gt; Unit,&#10;    sharedCurrentLocation: String,&#10;    onCurrentLocationChange: (String) -&gt; Unit,&#10;    sharedCurrentLatitude: Double,&#10;    onCurrentLatitudeChange: (Double) -&gt; Unit,&#10;    sharedCurrentLongitude: Double,&#10;    onCurrentLongitudeChange: (Double) -&gt; Unit&#10;) {&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var weatherJson by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var currentWeatherIcon by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var currentWeatherDescription by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    // Use shared state instead of local state&#10;    var zipCodeInput by remember { mutableStateOf(sharedZipCodeInput) }&#10;    var currentLocation by remember { mutableStateOf(sharedCurrentLocation) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;    val repository = remember { KotlinWeatherRepository() }&#10;    val context = LocalContext.current&#10;    val locationManager = remember { LocationManager(context) }&#10;    val locationRepository = remember { LocationRepository(context) }&#10;&#10;    // States for dropdown functionality&#10;    var savedLocations by remember { mutableStateOf&lt;List&lt;ZipCodeResponse&gt;&gt;(emptyList()) }&#10;    var isDropdownExpanded by remember { mutableStateOf(false) }&#10;    var isFocused by remember { mutableStateOf(false) }&#10;    var isUserTyping by remember { mutableStateOf(false) }&#10;&#10;    // Load saved locations from database&#10;    LaunchedEffect(Unit) {&#10;        locationRepository.getAllLocations().collect { locations -&gt;&#10;            savedLocations = locations&#10;        }&#10;    }&#10;&#10;    // Use shared coordinates instead of local coordinates&#10;    var currentLatitude by remember { mutableStateOf(sharedCurrentLatitude) }&#10;    var currentLongitude by remember { mutableStateOf(sharedCurrentLongitude) }&#10;    var hasTriedLocation by remember { mutableStateOf(false) }&#10;&#10;    // Sync local state with shared state when shared state changes&#10;    LaunchedEffect(sharedZipCodeInput) {&#10;        zipCodeInput = sharedZipCodeInput&#10;    }&#10;&#10;    LaunchedEffect(sharedCurrentLocation) {&#10;        currentLocation = sharedCurrentLocation&#10;    }&#10;&#10;    LaunchedEffect(sharedCurrentLatitude) {&#10;        currentLatitude = sharedCurrentLatitude&#10;    }&#10;&#10;    LaunchedEffect(sharedCurrentLongitude) {&#10;        currentLongitude = sharedCurrentLongitude&#10;    }&#10;&#10;    // Function to fetch weather data (moved before savedLocationsLauncher)&#10;    suspend fun fetchWeatherData(lat: Double, lon: Double, locationName: String) {&#10;        isLoading = true&#10;        errorMessage = null&#10;        weatherJson = null&#10;        currentWeatherIcon = null&#10;        currentWeatherDescription = null&#10;        currentLocation = locationName&#10;        onCurrentLocationChange(locationName)&#10;&#10;        // Update shared coordinates&#10;        onCurrentLatitudeChange(lat)&#10;        onCurrentLongitudeChange(lon)&#10;        currentLatitude = lat&#10;        currentLongitude = lon&#10;&#10;        try {&#10;            val result = repository.getWeatherDataAsJson(lat, lon)&#10;            result.fold(&#10;                onSuccess = { json -&gt;&#10;                    weatherJson = json&#10;                    isLoading = false&#10;                    Log.d(&quot;KotlinWeather&quot;, &quot;Weather JSON: $json&quot;)&#10;&#10;                    // Parse JSON to extract icon information&#10;                    try {&#10;                        val gson = Gson()&#10;                        val weatherResponse = gson.fromJson(json, WeatherResponse::class.java)&#10;                        weatherResponse.current?.weather?.firstOrNull()?.let { weather -&gt;&#10;                            currentWeatherIcon = weather.icon&#10;                            currentWeatherDescription = weather.description&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        Log.e(&quot;KotlinWeather&quot;, &quot;Error parsing weather data: ${e.message}&quot;)&#10;                    }&#10;&#10;                    // Save location to database if it was a zip code search&#10;                    if (zipCodeInput.isNotBlank()) {&#10;                        try {&#10;                            coroutineScope.launch {&#10;                                // First get the location data from the zip code&#10;                                val zipResult = repository.getLocationDataByZip(zipCodeInput.trim())&#10;                                zipResult.fold(&#10;                                    onSuccess = { zipCodeResponse -&gt;&#10;                                        // Save the location to database&#10;                                        locationRepository.saveLocation(zipCodeResponse)&#10;                                        Log.d(&quot;KotlinWeather&quot;, &quot;Location saved: ${zipCodeResponse.name}&quot;)&#10;                                    },&#10;                                    onFailure = { e -&gt;&#10;                                        Log.e(&quot;KotlinWeather&quot;, &quot;Failed to save location: ${e.message}&quot;)&#10;                                    }&#10;                                )&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            Log.e(&quot;KotlinWeather&quot;, &quot;Error saving location: ${e.message}&quot;)&#10;                        }&#10;                    }&#10;                },&#10;                onFailure = { exception -&gt;&#10;                    errorMessage = &quot;Error: ${exception.message}&quot;&#10;                    isLoading = false&#10;                }&#10;            )&#10;        } catch (e: Exception) {&#10;            errorMessage = &quot;Unexpected error: ${e.message}&quot;&#10;            isLoading = false&#10;        }&#10;    }&#10;&#10;    // Activity result launcher for saved locations&#10;    val savedLocationsLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            result.data?.let { data -&gt;&#10;                val selectedZip = data.getStringExtra(&quot;selected_zip&quot;)&#10;                val selectedName = data.getStringExtra(&quot;selected_name&quot;)&#10;                val selectedLat = data.getDoubleExtra(&quot;selected_lat&quot;, 0.0)&#10;                val selectedLon = data.getDoubleExtra(&quot;selected_lon&quot;, 0.0)&#10;&#10;                if (selectedZip != null &amp;&amp; selectedName != null) {&#10;                    zipCodeInput = selectedZip&#10;                    onZipCodeInputChange(selectedZip)&#10;                    currentLocation = selectedName&#10;                    onCurrentLocationChange(selectedName)&#10;                    currentLatitude = selectedLat&#10;                    onCurrentLatitudeChange(selectedLat)&#10;                    currentLongitude = selectedLon&#10;                    onCurrentLongitudeChange(selectedLon)&#10;&#10;                    // Fetch weather data for selected location&#10;                    coroutineScope.launch {&#10;                        fetchWeatherData(selectedLat, selectedLon, selectedName)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Permission launcher for location&#10;    val locationPermissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestMultiplePermissions()&#10;    ) { permissions -&gt;&#10;        val fineLocationGranted = permissions[Manifest.permission.ACCESS_FINE_LOCATION] ?: false&#10;        val coarseLocationGranted = permissions[Manifest.permission.ACCESS_COARSE_LOCATION] ?: false&#10;&#10;        coroutineScope.launch {&#10;            if (fineLocationGranted || coarseLocationGranted) {&#10;                // Permission granted, get location and fetch weather&#10;                try {&#10;                    locationManager.getCurrentLocation()?.let { locationData -&gt;&#10;                        currentLatitude = locationData.latitude&#10;                        currentLongitude = locationData.longitude&#10;                        onCurrentLatitudeChange(locationData.latitude)&#10;                        onCurrentLongitudeChange(locationData.longitude)&#10;                        fetchWeatherData(locationData.latitude, locationData.longitude, locationData.locationName)&#10;                    } ?: run {&#10;                        // Location unavailable, use default coordinates&#10;                        currentLocation = &quot;Duluth, MN (46.8384°N, 92.1800°W)&quot;&#10;                        onCurrentLocationChange(currentLocation)&#10;                        fetchWeatherData(currentLatitude, currentLongitude, currentLocation)&#10;                    }&#10;                } catch (e: Exception) {&#10;                    Log.e(&quot;KotlinWeather&quot;, &quot;Error getting location: ${e.message}&quot;)&#10;                    // Fallback to default coordinates&#10;                    currentLocation = &quot;Duluth, MN (46.8384°N, 92.1800°W)&quot;&#10;                    onCurrentLocationChange(currentLocation)&#10;                    fetchWeatherData(currentLatitude, currentLongitude, currentLocation)&#10;                }&#10;            } else {&#10;                // Permission denied, use default coordinates&#10;                currentLocation = &quot;Duluth, MN (46.8384°N, 92.1800°W)&quot;&#10;                onCurrentLocationChange(currentLocation)&#10;                fetchWeatherData(currentLatitude, currentLongitude, currentLocation)&#10;            }&#10;            hasTriedLocation = true&#10;        }&#10;    }&#10;&#10;    // Auto-fetch location and weather data on first load&#10;    LaunchedEffect(Unit) {&#10;        if (!hasTriedLocation) {&#10;            if (locationManager.hasLocationPermission()) {&#10;                // Permission already granted, get location&#10;                try {&#10;                    locationManager.getCurrentLocation()?.let { locationData -&gt;&#10;                        currentLatitude = locationData.latitude&#10;                        currentLongitude = locationData.longitude&#10;                        onCurrentLatitudeChange(locationData.latitude)&#10;                        onCurrentLongitudeChange(locationData.longitude)&#10;                        fetchWeatherData(locationData.latitude, locationData.longitude, locationData.locationName)&#10;                    } ?: run {&#10;                        // Location unavailable, use default coordinates&#10;                        currentLocation = &quot;Duluth, MN (46.8384°N, 92.1800°W)&quot;&#10;                        onCurrentLocationChange(currentLocation)&#10;                        fetchWeatherData(currentLatitude, currentLongitude, currentLocation)&#10;                    }&#10;                } catch (e: Exception) {&#10;                    Log.e(&quot;KotlinWeather&quot;, &quot;Error getting location: ${e.message}&quot;)&#10;                    // Fallback to default coordinates&#10;                    currentLocation = &quot;Duluth, MN (46.8384°N, 92.1800°W)&quot;&#10;                    onCurrentLocationChange(currentLocation)&#10;                    fetchWeatherData(currentLatitude, currentLongitude, currentLocation)&#10;                }&#10;            } else {&#10;                // Request location permission&#10;                locationPermissionLauncher.launch(&#10;                    arrayOf(&#10;                        Manifest.permission.ACCESS_FINE_LOCATION,&#10;                        Manifest.permission.ACCESS_COARSE_LOCATION&#10;                    )&#10;                )&#10;            }&#10;            hasTriedLocation = true&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState()),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = &quot;Kotlin Weather Implementation&quot;,&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        Text(&#10;            text = &quot;Location: $currentLocation&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Zip Code Search Field with Dropdown&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 8.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = zipCodeInput,&#10;                onValueChange = {&#10;                    val previousValue = zipCodeInput&#10;                    zipCodeInput = it&#10;                    isUserTyping = true&#10;&#10;                    // Show dropdown when user types and there are saved locations&#10;                    if (it.isNotEmpty() &amp;&amp; savedLocations.isNotEmpty()) {&#10;                        isDropdownExpanded = true&#10;                    } else if (it.isEmpty() &amp;&amp; savedLocations.isNotEmpty()) {&#10;                        // If user clears the field, show all locations&#10;                        isDropdownExpanded = true&#10;                    } else {&#10;                        isDropdownExpanded = false&#10;                    }&#10;                },&#10;                label = { Text(&quot;Enter Zip Code&quot;) },&#10;                placeholder = { Text(&quot;e.g., 90210&quot;) },&#10;                singleLine = true,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable {&#10;                        if (savedLocations.isNotEmpty()) {&#10;                            isUserTyping = false // User clicked, not typing&#10;                            isDropdownExpanded = !isDropdownExpanded&#10;                        }&#10;                    },&#10;                enabled = !isLoading,&#10;                trailingIcon = {&#10;                    if (savedLocations.isNotEmpty()) {&#10;                        IconButton(&#10;                            onClick = {&#10;                                isUserTyping = false // User clicked icon, not typing&#10;                                isDropdownExpanded = !isDropdownExpanded&#10;                            }&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = if (isDropdownExpanded) Icons.Filled.ExpandLess else Icons.Filled.ExpandMore,&#10;                                contentDescription = if (isDropdownExpanded) &quot;Collapse dropdown&quot; else &quot;Expand dropdown&quot;,&#10;                                tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            )&#10;&#10;            // Dropdown Menu using stable Material3 API&#10;            DropdownMenu(&#10;                expanded = isDropdownExpanded,&#10;                onDismissRequest = { isDropdownExpanded = false },&#10;                modifier = Modifier&#10;                    .fillMaxWidth(0.9f)&#10;                    .heightIn(max = 200.dp) // Limit height and allow scrolling&#10;            ) {&#10;                // Filter saved locations based on user interaction&#10;                val filteredLocations = if (!isUserTyping || zipCodeInput.isEmpty()) {&#10;                    // Show all locations when user clicked to open dropdown or field is empty&#10;                    savedLocations.take(8) // Show first 8 when no filter&#10;                } else {&#10;                    // Filter only when user is actively typing&#10;                    savedLocations.filter { location -&gt;&#10;                        location.zip.contains(zipCodeInput, ignoreCase = true) ||&#10;                        location.name.contains(zipCodeInput, ignoreCase = true)&#10;                    }.take(5) // Limit to 5 most recent matches&#10;                }&#10;&#10;                if (filteredLocations.isEmpty()) {&#10;                    // Show &quot;No results&quot; item&#10;                    DropdownMenuItem(&#10;                        text = {&#10;                            Text(&#10;                                text = if (zipCodeInput.isEmpty()) &quot;No saved locations&quot; else &quot;No matching saved locations&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                            )&#10;                        },&#10;                        onClick = { },&#10;                        enabled = false&#10;                    )&#10;                } else {&#10;                    // Show filtered saved locations&#10;                    filteredLocations.forEach { location -&gt;&#10;                        DropdownMenuItem(&#10;                            text = {&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxWidth()&#10;                                ) {&#10;                                    Text(&#10;                                        text = location.name,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        fontWeight = FontWeight.Medium,&#10;                                        maxLines = 1,&#10;                                        overflow = androidx.compose.ui.text.style.TextOverflow.Ellipsis&#10;                                    )&#10;                                    Text(&#10;                                        text = &quot;Zip: ${location.zip}&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f),&#10;                                        maxLines = 1&#10;                                    )&#10;                                }&#10;                            },&#10;                            onClick = {&#10;                                // Set the zip code and fetch weather data&#10;                                zipCodeInput = location.zip&#10;                                onZipCodeInputChange(location.zip) // Update shared state&#10;                                currentLocation = location.name&#10;                                onCurrentLocationChange(location.name) // Update shared state&#10;                                isDropdownExpanded = false&#10;&#10;                                // Fetch weather data for selected location using stored coordinates&#10;                                coroutineScope.launch {&#10;                                    fetchWeatherData(location.lat, location.lon, location.name)&#10;                                }&#10;                            },&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        )&#10;                    }&#10;&#10;                    // Show divider and &quot;View all&quot; option if there are many saved locations&#10;                    if (savedLocations.size &gt; 8) {&#10;                        HorizontalDivider(&#10;                            modifier = Modifier.padding(vertical = 4.dp),&#10;                            thickness = 1.dp,&#10;                            color = MaterialTheme.colorScheme.outline.copy(alpha = 0.3f)&#10;                        )&#10;                        DropdownMenuItem(&#10;                            text = {&#10;                                Row(&#10;                                    modifier = Modifier.fillMaxWidth(),&#10;                                    horizontalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;View all saved locations...&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        fontStyle = androidx.compose.ui.text.font.FontStyle.Italic,&#10;                                        color = MaterialTheme.colorScheme.primary&#10;                                    )&#10;                                }&#10;                            },&#10;                            onClick = {&#10;                                isDropdownExpanded = false&#10;                                val intent = Intent(context, SavedLocationsActivity::class.java)&#10;                                savedLocationsLauncher.launch(intent)&#10;                            },&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Button Row - Fetch Weather Data and View Saved Locations&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            Button(&#10;                onClick = {&#10;                    coroutineScope.launch {&#10;                        isLoading = true&#10;                        errorMessage = null&#10;                        weatherJson = null&#10;                        currentWeatherIcon = null&#10;                        currentWeatherDescription = null&#10;&#10;                        try {&#10;                            val result = if (zipCodeInput.isNotBlank()) {&#10;                                // Use zip code search&#10;                                currentLocation = &quot;Zip Code: ${zipCodeInput.trim()}&quot;&#10;                                repository.getWeatherDataByZip(zipCodeInput.trim())&#10;                            } else {&#10;                                // Use default coordinates&#10;                                currentLocation = &quot;Duluth, MN (46.8384°N, 92.1800°W)&quot;&#10;                                repository.getWeatherDataAsJson(currentLatitude, currentLongitude)&#10;                            }&#10;&#10;                            result.fold(&#10;                                onSuccess = { json -&gt;&#10;                                    weatherJson = json&#10;                                    isLoading = false&#10;                                    Log.d(&quot;KotlinWeather&quot;, &quot;Weather JSON: $json&quot;)&#10;&#10;                                    // Parse JSON to extract icon information&#10;                                    try {&#10;                                        val gson = Gson()&#10;                                        val weatherResponse = gson.fromJson(json, WeatherResponse::class.java)&#10;                                        weatherResponse.current?.weather?.firstOrNull()?.let { weather -&gt;&#10;                                            currentWeatherIcon = weather.icon&#10;                                            currentWeatherDescription = weather.description&#10;                                        }&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;KotlinWeather&quot;, &quot;Error parsing weather data: ${e.message}&quot;)&#10;                                    }&#10;&#10;                                    // Save location to database if it was a zip code search&#10;                                    if (zipCodeInput.isNotBlank()) {&#10;                                        try {&#10;                                            coroutineScope.launch {&#10;                                                // First get the location data from the zip code&#10;                                                val zipResult = repository.getLocationDataByZip(zipCodeInput.trim())&#10;                                                zipResult.fold(&#10;                                                    onSuccess = { zipCodeResponse -&gt;&#10;                                                        // Save the location to database&#10;                                                        locationRepository.saveLocation(zipCodeResponse)&#10;                                                        Log.d(&quot;KotlinWeather&quot;, &quot;Location saved: ${zipCodeResponse.name}&quot;)&#10;                                                    },&#10;                                                    onFailure = { e -&gt;&#10;                                                        Log.e(&quot;KotlinWeather&quot;, &quot;Failed to save location: ${e.message}&quot;)&#10;                                                    }&#10;                                                )&#10;                                            }&#10;                                        } catch (e: Exception) {&#10;                                            Log.e(&quot;KotlinWeather&quot;, &quot;Error saving location: ${e.message}&quot;)&#10;                                        }&#10;                                    }&#10;                                },&#10;                                onFailure = { exception -&gt;&#10;                                    errorMessage = &quot;Error: ${exception.message}&quot;&#10;                                    isLoading = false&#10;                                }&#10;                            )&#10;                        } catch (e: Exception) {&#10;                            errorMessage = &quot;Unexpected error: ${e.message}&quot;&#10;                            isLoading = false&#10;                        }&#10;                    }&#10;                },&#10;                enabled = !isLoading,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&quot;Fetch Weather Data&quot;)&#10;            }&#10;&#10;            OutlinedButton(&#10;                onClick = {&#10;                    val intent = Intent(context, SavedLocationsActivity::class.java)&#10;                    savedLocationsLauncher.launch(intent)&#10;                },&#10;                enabled = !isLoading,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&quot;View Saved&quot;)&#10;            }&#10;        }&#10;&#10;        // Weather Icon Display&#10;        currentWeatherIcon?.let { iconCode -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .padding(bottom = 16.dp)&#10;                    .clip(RoundedCornerShape(16.dp))&#10;                    .clickable {&#10;                        weatherJson?.let { json -&gt;&#10;                            val gson = Gson()&#10;                            val weatherResponse = try {&#10;                                gson.fromJson(json, WeatherResponse::class.java)&#10;                            } catch (e: Exception) {&#10;                                null&#10;                            }&#10;&#10;                            weatherResponse?.current?.let { current -&gt;&#10;                                val intent = Intent(context, CurrentWeatherDetailActivity::class.java).apply {&#10;                                    putExtra(&quot;current_weather_json&quot;, gson.toJson(current))&#10;                                    putExtra(&quot;location&quot;, currentLocation)&#10;                                }&#10;                                context.startActivity(intent)&#10;                            }&#10;                        }&#10;                    },&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // Current day and date&#10;                    val currentDate = java.util.Date()&#10;                    val dayFormatter = java.text.SimpleDateFormat(&quot;EEEE&quot;, java.util.Locale.getDefault())&#10;                    val dateFormatter = java.text.SimpleDateFormat(&quot;MMM d&quot;, java.util.Locale.getDefault())&#10;&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = dayFormatter.format(currentDate),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(&#10;                            text = dateFormatter.format(currentDate),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                        )&#10;                    }&#10;&#10;                    AsyncImage(&#10;                        model = &quot;https://openweathermap.org/img/wn/${iconCode}@2x.png&quot;,&#10;                        contentDescription = currentWeatherDescription ?: &quot;Weather icon&quot;,&#10;                        modifier = Modifier.size(80.dp)&#10;                    )&#10;&#10;                    currentWeatherDescription?.let { description -&gt;&#10;                        Text(&#10;                            text = description.replaceFirstChar { it.uppercase() },&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            modifier = Modifier.padding(top = 8.dp, bottom = 8.dp)&#10;                        )&#10;                    }&#10;&#10;                    // Parse weather data for temperature and wind info&#10;                    weatherJson?.let { json -&gt;&#10;                        val gson = Gson()&#10;                        val weatherResponse = try {&#10;                            gson.fromJson(json, WeatherResponse::class.java)&#10;                        } catch (e: Exception) {&#10;                            Log.e(&quot;KotlinWeather&quot;, &quot;Error parsing weather display data: ${e.message}&quot;)&#10;                            null&#10;                        }&#10;&#10;                        weatherResponse?.current?.let { current -&gt;&#10;                            // Temperature display&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                modifier = Modifier.padding(bottom = 8.dp)&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;${current.temp.toInt()}°F&quot;,&#10;                                    style = MaterialTheme.typography.headlineMedium,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                            }&#10;&#10;                            // Wind speed and direction display&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                horizontalArrangement = Arrangement.Center&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;Wind: ${current.windSpeed.toInt()} mph &quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;&#10;                                // Wind direction arrow&#10;                                Text(&#10;                                    text = &quot;↑&quot;,&#10;                                    style = MaterialTheme.typography.headlineSmall,&#10;                                    modifier = Modifier.graphicsLayer {&#10;                                        rotationZ = current.windDeg.toFloat()&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Hourly Weather Forecast Row&#10;        weatherJson?.let { json -&gt;&#10;            val gson = Gson()&#10;            val weatherResponse = try {&#10;                gson.fromJson(json, WeatherResponse::class.java)&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;KotlinWeather&quot;, &quot;Error parsing hourly weather data: ${e.message}&quot;)&#10;                null&#10;            }&#10;&#10;            weatherResponse?.hourly?.take(24)?.let { hourlyWeather -&gt;&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;24-Hour Forecast&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    LazyRow(&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                        contentPadding = PaddingValues(horizontal = 4.dp)&#10;                    ) {&#10;                        items(hourlyWeather) { hour -&gt;&#10;                            Card(&#10;                                modifier = Modifier&#10;                                    .width(100.dp)&#10;                                    .clip(RoundedCornerShape(16.dp)),&#10;                                colors = CardDefaults.cardColors(&#10;                                    containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;                                )&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier&#10;                                        .padding(8.dp)&#10;                                        .fillMaxWidth(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally&#10;                                ) {&#10;                                    // Time&#10;                                    val timeFormatter = java.text.SimpleDateFormat(&quot;h a&quot;, java.util.Locale.getDefault())&#10;                                    val date = java.util.Date(hour.dt * 1000)&#10;&#10;                                    Text(&#10;                                        text = timeFormatter.format(date),&#10;                                        style = MaterialTheme.typography.labelSmall,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        modifier = Modifier.padding(bottom = 4.dp)&#10;                                    )&#10;&#10;                                    // Weather icon&#10;                                    hour.weather.firstOrNull()?.let { weather -&gt;&#10;                                        AsyncImage(&#10;                                            model = &quot;https://openweathermap.org/img/wn/${weather.icon}@2x.png&quot;,&#10;                                            contentDescription = weather.description,&#10;                                            modifier = Modifier&#10;                                                .size(40.dp)&#10;                                                .padding(bottom = 4.dp)&#10;                                        )&#10;                                    }&#10;&#10;                                    // Temperature&#10;                                    Text(&#10;                                        text = &quot;${hour.temp.toInt()}°&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        modifier = Modifier.padding(bottom = 4.dp)&#10;                                    )&#10;&#10;                                    // Wind speed with direction&#10;                                    Row(&#10;                                        horizontalArrangement = Arrangement.Center,&#10;                                        verticalAlignment = Alignment.CenterVertically&#10;                                    ) {&#10;                                        Text(&#10;                                            text = &quot;${hour.windSpeed.toInt()}&quot;,&#10;                                            style = MaterialTheme.typography.labelSmall&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;↑&quot;,&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            modifier = Modifier.graphicsLayer {&#10;                                                rotationZ = hour.windDeg.toFloat()&#10;                                            }&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Daily Weather Forecast Row&#10;        weatherJson?.let { json -&gt;&#10;            val gson = Gson()&#10;            val weatherResponse = try {&#10;                gson.fromJson(json, WeatherResponse::class.java)&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;KotlinWeather&quot;, &quot;Error parsing daily weather data: ${e.message}&quot;)&#10;                null&#10;            }&#10;&#10;            weatherResponse?.daily?.let { dailyWeather -&gt;&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;7-Day Forecast&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    LazyRow(&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                        contentPadding = PaddingValues(horizontal = 4.dp)&#10;                    ) {&#10;                        items(dailyWeather) { day -&gt;&#10;                            Card(&#10;                                modifier = Modifier&#10;                                    .width(120.dp)&#10;                                    .clip(RoundedCornerShape(16.dp))&#10;                                    .clickable {&#10;                                        val gson = Gson()&#10;                                        val intent = Intent(context, DailyWeatherDetailActivity::class.java).apply {&#10;                                            putExtra(&quot;daily_weather_json&quot;, gson.toJson(day))&#10;                                            putExtra(&quot;location&quot;, currentLocation)&#10;                                        }&#10;                                        context.startActivity(intent)&#10;                                    },&#10;                                colors = CardDefaults.cardColors(&#10;                                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                                )&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier&#10;                                        .padding(12.dp)&#10;                                        .fillMaxWidth(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally&#10;                                ) {&#10;                                    // Day of week and date&#10;                                    val dayFormatter = java.text.SimpleDateFormat(&quot;EEE&quot;, java.util.Locale.getDefault())&#10;                                    val dateFormatter = java.text.SimpleDateFormat(&quot;MMM d&quot;, java.util.Locale.getDefault())&#10;                                    val date = java.util.Date(day.dt * 1000)&#10;&#10;                                    Row(&#10;                                        verticalAlignment = Alignment.CenterVertically,&#10;                                        modifier = Modifier.padding(bottom = 8.dp)&#10;                                    ) {&#10;                                        Text(&#10;                                            text = dayFormatter.format(date),&#10;                                            style = MaterialTheme.typography.bodySmall,&#10;                                            fontWeight = FontWeight.Bold&#10;                                        )&#10;                                        Spacer(modifier = Modifier.width(4.dp))&#10;                                        Text(&#10;                                            text = dateFormatter.format(date),&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                                        )&#10;                                    }&#10;&#10;                                    // Weather icon&#10;                                    day.weather.firstOrNull()?.let { weather -&gt;&#10;                                        AsyncImage(&#10;                                            model = &quot;https://openweathermap.org/img/wn/${weather.icon}@2x.png&quot;,&#10;                                            contentDescription = weather.description,&#10;                                            modifier = Modifier&#10;                                                .size(48.dp)&#10;                                                .padding(bottom = 8.dp)&#10;                                        )&#10;                                    }&#10;&#10;                                    // High/Low temperatures with labels&#10;                                    Row(&#10;                                        horizontalArrangement = Arrangement.Center,&#10;                                        verticalAlignment = Alignment.CenterVertically,&#10;                                        modifier = Modifier.padding(bottom = 4.dp)&#10;                                    ) {&#10;                                        Text(&#10;                                            text = &quot;High: &quot;,&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            fontWeight = FontWeight.Bold&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;${day.temp.max.toInt()}°&quot;,&#10;                                            style = MaterialTheme.typography.bodySmall&#10;                                        )&#10;                                    }&#10;&#10;                                    Row(&#10;                                        horizontalArrangement = Arrangement.Center,&#10;                                        verticalAlignment = Alignment.CenterVertically,&#10;                                        modifier = Modifier.padding(bottom = 8.dp)&#10;                                    ) {&#10;                                        Text(&#10;                                            text = &quot;Low: &quot;,&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            fontWeight = FontWeight.Bold&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;${day.temp.min.toInt()}°&quot;,&#10;                                            style = MaterialTheme.typography.bodySmall&#10;                                        )&#10;                                    }&#10;&#10;                                    // Wind info with label&#10;                                    Row(&#10;                                        horizontalArrangement = Arrangement.Center,&#10;                                        verticalAlignment = Alignment.CenterVertically&#10;                                    ) {&#10;                                        Text(&#10;                                            text = &quot;Wind: &quot;,&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            fontWeight = FontWeight.Bold&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;${day.windSpeed.toInt()}&quot;,&#10;                                            style = MaterialTheme.typography.labelSmall&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;↑&quot;,&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            modifier = Modifier.graphicsLayer {&#10;                                                rotationZ = day.windDeg.toFloat()&#10;                                            }&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        if (isLoading) {&#10;            CircularProgressIndicator(&#10;                modifier = Modifier.padding(16.dp)&#10;            )&#10;        }&#10;&#10;        errorMessage?.let { error -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.errorContainer&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = error,&#10;                    modifier = Modifier.padding(16.dp),&#10;                    color = MaterialTheme.colorScheme.onErrorContainer&#10;                )&#10;            }&#10;        }&#10;&#10;        weatherJson?.let { json -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Weather Data (JSON):&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;                    Text(&#10;                        text = json,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun JavaWeatherContent(&#10;    sharedZipCodeInput: String,&#10;    onZipCodeInputChange: (String) -&gt; Unit,&#10;    sharedCurrentLocation: String,&#10;    onCurrentLocationChange: (String) -&gt; Unit,&#10;    sharedCurrentLatitude: Double,&#10;    onCurrentLatitudeChange: (Double) -&gt; Unit,&#10;    sharedCurrentLongitude: Double,&#10;    onCurrentLongitudeChange: (Double) -&gt; Unit&#10;) {&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var weatherJson by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var currentWeatherIcon by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var currentWeatherDescription by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    // Use shared state instead of local state&#10;    var zipCodeInput by remember { mutableStateOf(sharedZipCodeInput) }&#10;    var currentLocation by remember { mutableStateOf(sharedCurrentLocation) }&#10;    val repository = remember { JavaWeatherRepository() }&#10;    val context = LocalContext.current&#10;    val locationManager = remember { LocationManager(context) }&#10;    val locationRepository = remember { LocationRepository(context) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    // States for dropdown functionality&#10;    var savedLocations by remember { mutableStateOf&lt;List&lt;ZipCodeResponse&gt;&gt;(emptyList()) }&#10;    var isDropdownExpanded by remember { mutableStateOf(false) }&#10;    var isUserTyping by remember { mutableStateOf(false) }&#10;&#10;    // Load saved locations from database&#10;    LaunchedEffect(Unit) {&#10;        locationRepository.getAllLocations().collect { locations -&gt;&#10;            savedLocations = locations&#10;        }&#10;    }&#10;&#10;    // Use shared coordinates instead of local coordinates&#10;    var currentLatitude by remember { mutableStateOf(sharedCurrentLatitude) }&#10;    var currentLongitude by remember { mutableStateOf(sharedCurrentLongitude) }&#10;    var hasTriedLocation by remember { mutableStateOf(false) }&#10;&#10;    // Sync local state with shared state when shared state changes&#10;    LaunchedEffect(sharedZipCodeInput) {&#10;        zipCodeInput = sharedZipCodeInput&#10;    }&#10;&#10;    LaunchedEffect(sharedCurrentLocation) {&#10;        currentLocation = sharedCurrentLocation&#10;    }&#10;&#10;    LaunchedEffect(sharedCurrentLatitude) {&#10;        currentLatitude = sharedCurrentLatitude&#10;    }&#10;&#10;    LaunchedEffect(sharedCurrentLongitude) {&#10;        currentLongitude = sharedCurrentLongitude&#10;    }&#10;&#10;    // Function to fetch weather data (updated to use shared state)&#10;    fun fetchWeatherData(lat: Double, lon: Double, locationName: String) {&#10;        isLoading = true&#10;        errorMessage = null&#10;        weatherJson = null&#10;        currentWeatherIcon = null&#10;        currentWeatherDescription = null&#10;        currentLocation = locationName&#10;        onCurrentLocationChange(locationName)&#10;&#10;        // Update shared coordinates&#10;        onCurrentLatitudeChange(lat)&#10;        onCurrentLongitudeChange(lon)&#10;        currentLatitude = lat&#10;        currentLongitude = lon&#10;&#10;        repository.getWeatherDataAsJson(lat, lon, object : JavaWeatherRepository.JsonDataCallback {&#10;            override fun onSuccess(jsonData: String) {&#10;                weatherJson = jsonData&#10;                isLoading = false&#10;                Log.d(&quot;JavaWeather&quot;, &quot;Weather JSON: $jsonData&quot;)&#10;&#10;                // Parse JSON to extract icon information&#10;                try {&#10;                    val gson = Gson()&#10;                    val weatherResponse = gson.fromJson(jsonData, WeatherResponse::class.java)&#10;                    weatherResponse.current?.weather?.firstOrNull()?.let { weather -&gt;&#10;                        currentWeatherIcon = weather.icon&#10;                        currentWeatherDescription = weather.description&#10;                    }&#10;                } catch (e: Exception) {&#10;                    Log.e(&quot;JavaWeather&quot;, &quot;Error parsing weather data: ${e.message}&quot;)&#10;                }&#10;            }&#10;&#10;            override fun onError(error: String) {&#10;                errorMessage = &quot;Error: $error&quot;&#10;                isLoading = false&#10;            }&#10;        })&#10;    }&#10;&#10;    // Activity result launcher for saved locations&#10;    val savedLocationsLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            result.data?.let { data -&gt;&#10;                val selectedZip = data.getStringExtra(&quot;selected_zip&quot;)&#10;                val selectedName = data.getStringExtra(&quot;selected_name&quot;)&#10;                val selectedLat = data.getDoubleExtra(&quot;selected_lat&quot;, 0.0)&#10;                val selectedLon = data.getDoubleExtra(&quot;selected_lon&quot;, 0.0)&#10;&#10;                if (selectedZip != null &amp;&amp; selectedName != null) {&#10;                    zipCodeInput = selectedZip&#10;                    onZipCodeInputChange(selectedZip)&#10;                    currentLocation = selectedName&#10;                    onCurrentLocationChange(selectedName)&#10;                    currentLatitude = selectedLat&#10;                    onCurrentLatitudeChange(selectedLat)&#10;                    currentLongitude = selectedLon&#10;                    onCurrentLongitudeChange(selectedLon)&#10;&#10;                    // Fetch weather data for selected location&#10;                    fetchWeatherData(selectedLat, selectedLon, selectedName)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Permission launcher for location&#10;    val locationPermissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestMultiplePermissions()&#10;    ) { permissions -&gt;&#10;        val fineLocationGranted = permissions[Manifest.permission.ACCESS_FINE_LOCATION] ?: false&#10;        val coarseLocationGranted = permissions[Manifest.permission.ACCESS_COARSE_LOCATION] ?: false&#10;&#10;        if (fineLocationGranted || coarseLocationGranted) {&#10;            // Permission granted, get location and fetch weather&#10;            isLoading = true&#10;            errorMessage = null&#10;            weatherJson = null&#10;            currentWeatherIcon = null&#10;            currentWeatherDescription = null&#10;&#10;            repository.getCurrentLocationAndWeather(object : JavaWeatherRepository.LocationWeatherCallback {&#10;                override fun onLocationReceived(latitude: Double, longitude: Double, locationName: String) {&#10;                    currentLatitude = latitude&#10;                    currentLongitude = longitude&#10;                    onCurrentLatitudeChange(latitude)&#10;                    onCurrentLongitudeChange(longitude)&#10;                    currentLocation = locationName&#10;                    onCurrentLocationChange(locationName)&#10;                }&#10;&#10;                override fun onWeatherSuccess(jsonData: String) {&#10;                    weatherJson = jsonData&#10;                    isLoading = false&#10;                    Log.d(&quot;JavaWeather&quot;, &quot;Weather JSON: $jsonData&quot;)&#10;&#10;                    // Parse JSON to extract icon information&#10;                    try {&#10;                        val gson = Gson()&#10;                        val weatherResponse = gson.fromJson(jsonData, WeatherResponse::class.java)&#10;                        weatherResponse.current?.weather?.firstOrNull()?.let { weather -&gt;&#10;                            currentWeatherIcon = weather.icon&#10;                            currentWeatherDescription = weather.description&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        Log.e(&quot;JavaWeather&quot;, &quot;Error parsing weather data: ${e.message}&quot;)&#10;                    }&#10;                }&#10;&#10;                override fun onError(error: String) {&#10;                    errorMessage = error&#10;                    isLoading = false&#10;                    // Fallback to default coordinates on error&#10;                    currentLocation = &quot;Duluth, MN (46.8384°N, 92.1800°W)&quot;&#10;                    onCurrentLocationChange(currentLocation)&#10;                    repository.getWeatherDataAsJson(currentLatitude, currentLongitude, object : JavaWeatherRepository.JsonDataCallback {&#10;                        override fun onSuccess(jsonData: String) {&#10;                            weatherJson = jsonData&#10;                            isLoading = false&#10;                            Log.d(&quot;JavaWeather&quot;, &quot;Weather JSON (fallback): $jsonData&quot;)&#10;&#10;                            try {&#10;                                val gson = Gson()&#10;                                val weatherResponse = gson.fromJson(jsonData, WeatherResponse::class.java)&#10;                                weatherResponse.current?.weather?.firstOrNull()?.let { weather -&gt;&#10;                                    currentWeatherIcon = weather.icon&#10;                                    currentWeatherDescription = weather.description&#10;                                }&#10;                            } catch (e: Exception) {&#10;                                Log.e(&quot;JavaWeather&quot;, &quot;Error parsing fallback weather data: ${e.message}&quot;)&#10;                            }&#10;                        }&#10;&#10;                        override fun onError(fallbackError: String) {&#10;                            errorMessage = &quot;Location error: $error, Weather error: $fallbackError&quot;&#10;                            isLoading = false&#10;                        }&#10;                    })&#10;                }&#10;            }, context)&#10;        } else {&#10;            // Permission denied, use default coordinates&#10;            currentLocation = &quot;Duluth, MN (46.8384°N, 92.1800°W)&quot;&#10;            onCurrentLocationChange(currentLocation)&#10;            isLoading = true&#10;            repository.getWeatherDataAsJson(currentLatitude, currentLongitude, object : JavaWeatherRepository.JsonDataCallback {&#10;                override fun onSuccess(jsonData: String) {&#10;                    weatherJson = jsonData&#10;                    isLoading = false&#10;                    Log.d(&quot;JavaWeather&quot;, &quot;Weather JSON (default): $jsonData&quot;)&#10;&#10;                    try {&#10;                        val gson = Gson()&#10;                        val weatherResponse = gson.fromJson(jsonData, WeatherResponse::class.java)&#10;                        weatherResponse.current?.weather?.firstOrNull()?.let { weather -&gt;&#10;                            currentWeatherIcon = weather.icon&#10;                            currentWeatherDescription = weather.description&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        Log.e(&quot;JavaWeather&quot;, &quot;Error parsing default weather data: ${e.message}&quot;)&#10;                    }&#10;                }&#10;&#10;                override fun onError(defaultError: String) {&#10;                    errorMessage = defaultError&#10;                    isLoading = false&#10;                }&#10;            })&#10;        }&#10;        hasTriedLocation = true&#10;    }&#10;&#10;    // Auto-fetch location and weather data on first load&#10;    LaunchedEffect(Unit) {&#10;        if (!hasTriedLocation) {&#10;            if (locationManager.hasLocationPermission()) {&#10;                // Permission already granted, get location&#10;                isLoading = true&#10;                errorMessage = null&#10;                weatherJson = null&#10;                currentWeatherIcon = null&#10;                currentWeatherDescription = null&#10;&#10;                repository.getCurrentLocationAndWeather(object : JavaWeatherRepository.LocationWeatherCallback {&#10;                    override fun onLocationReceived(latitude: Double, longitude: Double, locationName: String) {&#10;                        currentLatitude = latitude&#10;                        currentLongitude = longitude&#10;                        onCurrentLatitudeChange(latitude)&#10;                        onCurrentLongitudeChange(longitude)&#10;                        currentLocation = locationName&#10;                        onCurrentLocationChange(locationName)&#10;                    }&#10;&#10;                    override fun onWeatherSuccess(jsonData: String) {&#10;                        weatherJson = jsonData&#10;                        isLoading = false&#10;                        Log.d(&quot;JavaWeather&quot;, &quot;Weather JSON: $jsonData&quot;)&#10;&#10;                        // Parse JSON to extract icon information&#10;                        try {&#10;                            val gson = Gson()&#10;                            val weatherResponse = gson.fromJson(jsonData, WeatherResponse::class.java)&#10;                            weatherResponse.current?.weather?.firstOrNull()?.let { weather -&gt;&#10;                                currentWeatherIcon = weather.icon&#10;                                currentWeatherDescription = weather.description&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            Log.e(&quot;JavaWeather&quot;, &quot;Error parsing weather data: ${e.message}&quot;)&#10;                        }&#10;                    }&#10;&#10;                    override fun onError(error: String) {&#10;                        errorMessage = error&#10;                        isLoading = false&#10;                        // Fallback to default coordinates on error&#10;                        currentLocation = &quot;Duluth, MN (46.8384°N, 92.1800°W)&quot;&#10;                        onCurrentLocationChange(currentLocation)&#10;                        repository.getWeatherDataAsJson(currentLatitude, currentLongitude, object : JavaWeatherRepository.JsonDataCallback {&#10;                            override fun onSuccess(jsonData: String) {&#10;                                weatherJson = jsonData&#10;                                isLoading = false&#10;                                Log.d(&quot;JavaWeather&quot;, &quot;Weather JSON (fallback): $jsonData&quot;)&#10;&#10;                                try {&#10;                                    val gson = Gson()&#10;                                    val weatherResponse = gson.fromJson(jsonData, WeatherResponse::class.java)&#10;                                    weatherResponse.current?.weather?.firstOrNull()?.let { weather -&gt;&#10;                                        currentWeatherIcon = weather.icon&#10;                                        currentWeatherDescription = weather.description&#10;                                    }&#10;                                } catch (e: Exception) {&#10;                                    Log.e(&quot;JavaWeather&quot;, &quot;Error parsing fallback weather data: ${e.message}&quot;)&#10;                                }&#10;                            }&#10;&#10;                            override fun onError(fallbackError: String) {&#10;                                errorMessage = &quot;Location error: $error, Weather error: $fallbackError&quot;&#10;                                isLoading = false&#10;                            }&#10;                        })&#10;                    }&#10;                }, context)&#10;            } else {&#10;                // Request location permission&#10;                locationPermissionLauncher.launch(&#10;                    arrayOf(&#10;                        Manifest.permission.ACCESS_FINE_LOCATION,&#10;                        Manifest.permission.ACCESS_COARSE_LOCATION&#10;                    )&#10;                )&#10;            }&#10;            hasTriedLocation = true&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState()),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = &quot;Java Weather Implementation&quot;,&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        Text(&#10;            text = &quot;Location: $currentLocation&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Zip Code Search Field with Dropdown&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 8.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = zipCodeInput,&#10;                onValueChange = {&#10;                    zipCodeInput = it&#10;                    onZipCodeInputChange(it) // Update shared state&#10;                    isUserTyping = true&#10;&#10;                    // Show dropdown when user types and there are saved locations&#10;                    if (it.isNotEmpty() &amp;&amp; savedLocations.isNotEmpty()) {&#10;                        isDropdownExpanded = true&#10;                    } else if (it.isEmpty() &amp;&amp; savedLocations.isNotEmpty()) {&#10;                        // If user clears the field, show all locations&#10;                        isDropdownExpanded = true&#10;                    } else {&#10;                        isDropdownExpanded = false&#10;                    }&#10;                },&#10;                label = { Text(&quot;Enter Zip Code&quot;) },&#10;                placeholder = { Text(&quot;e.g., 90210&quot;) },&#10;                singleLine = true,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable {&#10;                        if (savedLocations.isNotEmpty()) {&#10;                            isUserTyping = false // User clicked, not typing&#10;                            isDropdownExpanded = !isDropdownExpanded&#10;                        }&#10;                    },&#10;                enabled = !isLoading,&#10;                trailingIcon = {&#10;                    if (savedLocations.isNotEmpty()) {&#10;                        IconButton(&#10;                            onClick = {&#10;                                isUserTyping = false // User clicked icon, not typing&#10;                                isDropdownExpanded = !isDropdownExpanded&#10;                            }&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = if (isDropdownExpanded) Icons.Filled.ExpandLess else Icons.Filled.ExpandMore,&#10;                                contentDescription = if (isDropdownExpanded) &quot;Collapse dropdown&quot; else &quot;Expand dropdown&quot;,&#10;                                tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            )&#10;&#10;            // Dropdown Menu using stable Material3 API&#10;            DropdownMenu(&#10;                expanded = isDropdownExpanded,&#10;                onDismissRequest = { isDropdownExpanded = false },&#10;                modifier = Modifier&#10;                    .fillMaxWidth(0.9f)&#10;                    .heightIn(max = 200.dp) // Limit height and allow scrolling&#10;            ) {&#10;                // Filter saved locations based on user interaction&#10;                val filteredLocations = if (!isUserTyping || zipCodeInput.isEmpty()) {&#10;                    // Show all locations when user clicked to open dropdown or field is empty&#10;                    savedLocations.take(8) // Show first 8 when no filter&#10;                } else {&#10;                    // Filter only when user is actively typing&#10;                    savedLocations.filter { location -&gt;&#10;                        location.zip.contains(zipCodeInput, ignoreCase = true) ||&#10;                        location.name.contains(zipCodeInput, ignoreCase = true)&#10;                    }.take(5) // Limit to 5 most recent matches&#10;                }&#10;&#10;                if (filteredLocations.isEmpty()) {&#10;                    // Show &quot;No results&quot; item&#10;                    DropdownMenuItem(&#10;                        text = {&#10;                            Text(&#10;                                text = if (zipCodeInput.isEmpty()) &quot;No saved locations&quot; else &quot;No matching saved locations&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                            )&#10;                        },&#10;                        onClick = { },&#10;                        enabled = false&#10;                    )&#10;                } else {&#10;                    // Show filtered saved locations&#10;                    filteredLocations.forEach { location -&gt;&#10;                        DropdownMenuItem(&#10;                            text = {&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxWidth()&#10;                                ) {&#10;                                    Text(&#10;                                        text = location.name,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        fontWeight = FontWeight.Medium,&#10;                                        maxLines = 1,&#10;                                        overflow = androidx.compose.ui.text.style.TextOverflow.Ellipsis&#10;                                    )&#10;                                    Text(&#10;                                        text = &quot;Zip: ${location.zip}&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f),&#10;                                        maxLines = 1&#10;                                    )&#10;                                }&#10;                            },&#10;                            onClick = {&#10;                                // Set the zip code and fetch weather data&#10;                                zipCodeInput = location.zip&#10;                                onZipCodeInputChange(location.zip) // Update shared state&#10;                                currentLocation = location.name&#10;                                onCurrentLocationChange(location.name) // Update shared state&#10;                                isDropdownExpanded = false&#10;&#10;                                // Fetch weather data for selected location using stored coordinates&#10;                                coroutineScope.launch {&#10;                                    fetchWeatherData(location.lat, location.lon, location.name)&#10;                                }&#10;                            },&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        )&#10;                    }&#10;&#10;                    // Show divider and &quot;View all&quot; option if there are many saved locations&#10;                    if (savedLocations.size &gt; 8) {&#10;                        HorizontalDivider(&#10;                            modifier = Modifier.padding(vertical = 4.dp),&#10;                            thickness = 1.dp,&#10;                            color = MaterialTheme.colorScheme.outline.copy(alpha = 0.3f)&#10;                        )&#10;                        DropdownMenuItem(&#10;                            text = {&#10;                                Row(&#10;                                    modifier = Modifier.fillMaxWidth(),&#10;                                    horizontalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;View all saved locations...&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        fontStyle = androidx.compose.ui.text.font.FontStyle.Italic,&#10;                                        color = MaterialTheme.colorScheme.primary&#10;                                    )&#10;                                }&#10;                            },&#10;                            onClick = {&#10;                                isDropdownExpanded = false&#10;                                val intent = Intent(context, SavedLocationsActivity::class.java)&#10;                                savedLocationsLauncher.launch(intent)&#10;                            },&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Button Row - Fetch Weather Data and View Saved Locations&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            Button(&#10;                onClick = {&#10;                    isLoading = true&#10;                    errorMessage = null&#10;                    weatherJson = null&#10;                    currentWeatherIcon = null&#10;                    currentWeatherDescription = null&#10;&#10;                    if (zipCodeInput.isNotBlank()) {&#10;                        // Use zip code search&#10;                        currentLocation = &quot;Zip Code: ${zipCodeInput.trim()}&quot;&#10;                        repository.getWeatherDataByZip(zipCodeInput.trim(), object : JavaWeatherRepository.JsonDataCallback {&#10;                            override fun onSuccess(jsonData: String) {&#10;                                weatherJson = jsonData&#10;                                isLoading = false&#10;                                Log.d(&quot;JavaWeather&quot;, &quot;Weather JSON (from zip): $jsonData&quot;)&#10;&#10;                                // Parse JSON to extract icon information&#10;                                try {&#10;                                    val gson = Gson()&#10;                                    val weatherResponse = gson.fromJson(jsonData, WeatherResponse::class.java)&#10;                                    weatherResponse.current?.weather?.firstOrNull()?.let { weather -&gt;&#10;                                        currentWeatherIcon = weather.icon&#10;                                        currentWeatherDescription = weather.description&#10;                                    }&#10;                                } catch (e: Exception) {&#10;                                    Log.e(&quot;JavaWeather&quot;, &quot;Error parsing weather data: ${e.message}&quot;)&#10;                                }&#10;                            }&#10;&#10;                            override fun onError(error: String) {&#10;                                errorMessage = error&#10;                                isLoading = false&#10;                            }&#10;                        })&#10;                    } else {&#10;                        // Use default coordinates&#10;                        currentLocation = &quot;Duluth, MN (46.8384°N, 92.1800°W)&quot;&#10;                        repository.getWeatherDataAsJson(currentLatitude, currentLongitude, object : JavaWeatherRepository.JsonDataCallback {&#10;                            override fun onSuccess(jsonData: String) {&#10;                                weatherJson = jsonData&#10;                                isLoading = false&#10;                                Log.d(&quot;JavaWeather&quot;, &quot;Weather JSON: $jsonData&quot;)&#10;&#10;                                // Parse JSON to extract icon information&#10;                                try {&#10;                                    val gson = Gson()&#10;                                    val weatherResponse = gson.fromJson(jsonData, WeatherResponse::class.java)&#10;                                    weatherResponse.current?.weather?.firstOrNull()?.let { weather -&gt;&#10;                                        currentWeatherIcon = weather.icon&#10;                                        currentWeatherDescription = weather.description&#10;                                    }&#10;                                } catch (e: Exception) {&#10;                                    Log.e(&quot;JavaWeather&quot;, &quot;Error parsing weather data: ${e.message}&quot;)&#10;                                }&#10;                            }&#10;&#10;                            override fun onError(error: String) {&#10;                                errorMessage = error&#10;                                isLoading = false&#10;                            }&#10;                        })&#10;                    }&#10;                },&#10;                enabled = !isLoading,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&quot;Fetch Weather Data&quot;)&#10;            }&#10;&#10;            OutlinedButton(&#10;                onClick = {&#10;                    val intent = Intent(context, SavedLocationsActivity::class.java)&#10;                    savedLocationsLauncher.launch(intent)&#10;                },&#10;                enabled = !isLoading,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&quot;View Saved&quot;)&#10;            }&#10;        }&#10;&#10;        // Weather Icon Display&#10;        currentWeatherIcon?.let { iconCode -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .padding(bottom = 16.dp)&#10;                    .clip(RoundedCornerShape(16.dp))&#10;                    .clickable {&#10;                        weatherJson?.let { json -&gt;&#10;                            val gson = Gson()&#10;                            val weatherResponse = try {&#10;                                gson.fromJson(json, WeatherResponse::class.java)&#10;                            } catch (e: Exception) {&#10;                                null&#10;                            }&#10;&#10;                            weatherResponse?.current?.let { current -&gt;&#10;                                val intent = Intent(context, CurrentWeatherDetailActivity::class.java).apply {&#10;                                    putExtra(&quot;current_weather_json&quot;, gson.toJson(current))&#10;                                    putExtra(&quot;location&quot;, currentLocation)&#10;                                }&#10;                                context.startActivity(intent)&#10;                            }&#10;                        }&#10;                    },&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // Current day and date&#10;                    val currentDate = java.util.Date()&#10;                    val dayFormatter = java.text.SimpleDateFormat(&quot;EEEE&quot;, java.util.Locale.getDefault())&#10;                    val dateFormatter = java.text.SimpleDateFormat(&quot;MMM d&quot;, java.util.Locale.getDefault())&#10;&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = dayFormatter.format(currentDate),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(&#10;                            text = dateFormatter.format(currentDate),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                        )&#10;                    }&#10;&#10;                    AsyncImage(&#10;                        model = &quot;https://openweathermap.org/img/wn/${iconCode}@2x.png&quot;,&#10;                        contentDescription = currentWeatherDescription ?: &quot;Weather icon&quot;,&#10;                        modifier = Modifier.size(80.dp)&#10;                    )&#10;&#10;                    currentWeatherDescription?.let { description -&gt;&#10;                        Text(&#10;                            text = description.replaceFirstChar { it.uppercase() },&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            modifier = Modifier.padding(top = 8.dp, bottom = 8.dp)&#10;                        )&#10;                    }&#10;&#10;                    // Parse weather data for temperature and wind info&#10;                    weatherJson?.let { json -&gt;&#10;                        val gson = Gson()&#10;                        val weatherResponse = try {&#10;                            gson.fromJson(json, WeatherResponse::class.java)&#10;                        } catch (e: Exception) {&#10;                            Log.e(&quot;JavaWeather&quot;, &quot;Error parsing weather display data: ${e.message}&quot;)&#10;                            null&#10;                        }&#10;&#10;                        weatherResponse?.current?.let { current -&gt;&#10;                            // Temperature display&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                modifier = Modifier.padding(bottom = 8.dp)&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;${current.temp.toInt()}°F&quot;,&#10;                                    style = MaterialTheme.typography.headlineMedium,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                            }&#10;&#10;                            // Wind speed and direction display&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                horizontalArrangement = Arrangement.Center&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;Wind: ${current.windSpeed.toInt()} mph &quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;&#10;                                // Wind direction arrow&#10;                                Text(&#10;                                    text = &quot;↑&quot;,&#10;                                    style = MaterialTheme.typography.headlineSmall,&#10;                                    modifier = Modifier.graphicsLayer {&#10;                                        rotationZ = current.windDeg.toFloat()&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Hourly Weather Forecast Row&#10;        weatherJson?.let { json -&gt;&#10;            val gson = Gson()&#10;            val weatherResponse = try {&#10;                gson.fromJson(json, WeatherResponse::class.java)&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;JavaWeather&quot;, &quot;Error parsing hourly weather data: ${e.message}&quot;)&#10;                null&#10;            }&#10;&#10;            weatherResponse?.hourly?.take(24)?.let { hourlyWeather -&gt;&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;24-Hour Forecast&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    LazyRow(&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                        contentPadding = PaddingValues(horizontal = 4.dp)&#10;                    ) {&#10;                        items(hourlyWeather) { hour -&gt;&#10;                            Card(&#10;                                modifier = Modifier&#10;                                    .width(100.dp)&#10;                                    .clip(RoundedCornerShape(16.dp)),&#10;                                colors = CardDefaults.cardColors(&#10;                                    containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;                                )&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier&#10;                                        .padding(8.dp)&#10;                                        .fillMaxWidth(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally&#10;                                ) {&#10;                                    // Time&#10;                                    val timeFormatter = java.text.SimpleDateFormat(&quot;h a&quot;, java.util.Locale.getDefault())&#10;                                    val date = java.util.Date(hour.dt * 1000)&#10;&#10;                                    Text(&#10;                                        text = timeFormatter.format(date),&#10;                                        style = MaterialTheme.typography.labelSmall,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        modifier = Modifier.padding(bottom = 4.dp)&#10;                                    )&#10;&#10;                                    // Weather icon&#10;                                    hour.weather.firstOrNull()?.let { weather -&gt;&#10;                                        AsyncImage(&#10;                                            model = &quot;https://openweathermap.org/img/wn/${weather.icon}@2x.png&quot;,&#10;                                            contentDescription = weather.description,&#10;                                            modifier = Modifier&#10;                                                .size(40.dp)&#10;                                                .padding(bottom = 4.dp)&#10;                                        )&#10;                                    }&#10;&#10;                                    // Temperature&#10;                                    Text(&#10;                                        text = &quot;${hour.temp.toInt()}°&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        modifier = Modifier.padding(bottom = 4.dp)&#10;                                    )&#10;&#10;                                    // Wind speed with direction&#10;                                    Row(&#10;                                        horizontalArrangement = Arrangement.Center,&#10;                                        verticalAlignment = Alignment.CenterVertically&#10;                                    ) {&#10;                                        Text(&#10;                                            text = &quot;${hour.windSpeed.toInt()}&quot;,&#10;                                            style = MaterialTheme.typography.labelSmall&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;↑&quot;,&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            modifier = Modifier.graphicsLayer {&#10;                                                rotationZ = hour.windDeg.toFloat()&#10;                                            }&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Daily Weather Forecast Row&#10;        weatherJson?.let { json -&gt;&#10;            val gson = Gson()&#10;            val weatherResponse = try {&#10;                gson.fromJson(json, WeatherResponse::class.java)&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;JavaWeather&quot;, &quot;Error parsing daily weather data: ${e.message}&quot;)&#10;                null&#10;            }&#10;&#10;            weatherResponse?.daily?.let { dailyWeather -&gt;&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;7-Day Forecast&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    LazyRow(&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                        contentPadding = PaddingValues(horizontal = 4.dp)&#10;                    ) {&#10;                        items(dailyWeather) { day -&gt;&#10;                            Card(&#10;                                modifier = Modifier&#10;                                    .width(120.dp)&#10;                                    .clip(RoundedCornerShape(16.dp))&#10;                                    .clickable {&#10;                                        val gson = Gson()&#10;                                        val intent = Intent(context, DailyWeatherDetailActivity::class.java).apply {&#10;                                            putExtra(&quot;daily_weather_json&quot;, gson.toJson(day))&#10;                                            putExtra(&quot;location&quot;, currentLocation)&#10;                                        }&#10;                                        context.startActivity(intent)&#10;                                    },&#10;                                colors = CardDefaults.cardColors(&#10;                                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                                )&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier&#10;                                        .padding(12.dp)&#10;                                        .fillMaxWidth(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally&#10;                                ) {&#10;                                    // Day of week and date&#10;                                    val dayFormatter = java.text.SimpleDateFormat(&quot;EEE&quot;, java.util.Locale.getDefault())&#10;                                    val dateFormatter = java.text.SimpleDateFormat(&quot;MMM d&quot;, java.util.Locale.getDefault())&#10;                                    val date = java.util.Date(day.dt * 1000)&#10;&#10;                                    Row(&#10;                                        verticalAlignment = Alignment.CenterVertically,&#10;                                        modifier = Modifier.padding(bottom = 8.dp)&#10;                                    ) {&#10;                                        Text(&#10;                                            text = dayFormatter.format(date),&#10;                                            style = MaterialTheme.typography.bodySmall,&#10;                                            fontWeight = FontWeight.Bold&#10;                                        )&#10;                                        Spacer(modifier = Modifier.width(4.dp))&#10;                                        Text(&#10;                                            text = dateFormatter.format(date),&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                                        )&#10;                                    }&#10;&#10;                                    // Weather icon&#10;                                    day.weather.firstOrNull()?.let { weather -&gt;&#10;                                        AsyncImage(&#10;                                            model = &quot;https://openweathermap.org/img/wn/${weather.icon}@2x.png&quot;,&#10;                                            contentDescription = weather.description,&#10;                                            modifier = Modifier&#10;                                                .size(48.dp)&#10;                                                .padding(bottom = 8.dp)&#10;                                        )&#10;                                    }&#10;&#10;                                    // High/Low temperatures with labels&#10;                                    Row(&#10;                                        horizontalArrangement = Arrangement.Center,&#10;                                        verticalAlignment = Alignment.CenterVertically,&#10;                                        modifier = Modifier.padding(bottom = 4.dp)&#10;                                    ) {&#10;                                        Text(&#10;                                            text = &quot;High: &quot;,&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            fontWeight = FontWeight.Bold&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;${day.temp.max.toInt()}°&quot;,&#10;                                            style = MaterialTheme.typography.bodySmall&#10;                                        )&#10;                                    }&#10;&#10;                                    Row(&#10;                                        horizontalArrangement = Arrangement.Center,&#10;                                        verticalAlignment = Alignment.CenterVertically,&#10;                                        modifier = Modifier.padding(bottom = 8.dp)&#10;                                    ) {&#10;                                        Text(&#10;                                            text = &quot;Low: &quot;,&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            fontWeight = FontWeight.Bold&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;${day.temp.min.toInt()}°&quot;,&#10;                                            style = MaterialTheme.typography.bodySmall&#10;                                        )&#10;                                    }&#10;&#10;                                    // Wind info with label&#10;                                    Row(&#10;                                        horizontalArrangement = Arrangement.Center,&#10;                                        verticalAlignment = Alignment.CenterVertically&#10;                                    ) {&#10;                                        Text(&#10;                                            text = &quot;Wind: &quot;,&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            fontWeight = FontWeight.Bold&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;${day.windSpeed.toInt()}&quot;,&#10;                                            style = MaterialTheme.typography.labelSmall&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;↑&quot;,&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            modifier = Modifier.graphicsLayer {&#10;                                                rotationZ = day.windDeg.toFloat()&#10;                                            }&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        if (isLoading) {&#10;            CircularProgressIndicator(&#10;                modifier = Modifier.padding(16.dp)&#10;            )&#10;        }&#10;&#10;        errorMessage?.let { error -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.errorContainer&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = error,&#10;                    modifier = Modifier.padding(16.dp),&#10;                    color = MaterialTheme.colorScheme.onErrorContainer&#10;                )&#10;            }&#10;        }&#10;&#10;        weatherJson?.let { json -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Weather Data (JSON):&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;                    Text(&#10;                        text = json,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun WeatherAppPreview() {&#10;    WhetherOrNotTheme {&#10;        WeatherApp()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.whetherornot&#10;&#10;import android.Manifest&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ExpandLess&#10;import androidx.compose.material.icons.filled.ExpandMore&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import com.example.whetherornot.ui.theme.UmbrellaTheme&#10;import androidx.compose.ui.Alignment&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import com.example.whetherornot.data.repository.KotlinWeatherRepository&#10;import com.example.whetherornot.data.repository.JavaWeatherRepository&#10;import com.example.whetherornot.data.repository.LocationRepository&#10;import com.example.whetherornot.data.model.WeatherResponse&#10;import com.example.whetherornot.data.model.ZipCodeResponse&#10;import com.example.whetherornot.utils.LocationManager&#10;import com.google.gson.Gson&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            UmbrellaTheme {&#10;                WeatherApp()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun WeatherApp() {&#10;    var selectedTabIndex by remember { mutableIntStateOf(0) }&#10;    val tabTitles = listOf(&quot;Kotlin Weather&quot;, &quot;Java Weather&quot;)&#10;&#10;    // Shared state for location data between tabs&#10;    var sharedZipCodeInput by remember { mutableStateOf(&quot;&quot;) }&#10;    var sharedCurrentLocation by remember { mutableStateOf(&quot;Loading location...&quot;) }&#10;    var sharedCurrentLatitude by remember { mutableStateOf(46.8384) } // Default: Duluth, MN&#10;    var sharedCurrentLongitude by remember { mutableStateOf(-92.1800) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            CenterAlignedTopAppBar(&#10;                title = {&#10;                    Text(&#10;                        text = &quot;Whether Or Not&quot;,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                colors = TopAppBarDefaults.centerAlignedTopAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                )&#10;            )&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;        ) {&#10;            TabRow(&#10;                selectedTabIndex = selectedTabIndex,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                tabTitles.forEachIndexed { index, title -&gt;&#10;                    Tab(&#10;                        selected = selectedTabIndex == index,&#10;                        onClick = { selectedTabIndex = index },&#10;                        text = {&#10;                            Text(&#10;                                text = title,&#10;                                fontWeight = if (selectedTabIndex == index) FontWeight.Bold else FontWeight.Normal&#10;                            )&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Content area for each tab - pass shared state&#10;            when (selectedTabIndex) {&#10;                0 -&gt; KotlinWeatherContent(&#10;                    sharedZipCodeInput = sharedZipCodeInput,&#10;                    onZipCodeInputChange = { sharedZipCodeInput = it },&#10;                    sharedCurrentLocation = sharedCurrentLocation,&#10;                    onCurrentLocationChange = { sharedCurrentLocation = it },&#10;                    sharedCurrentLatitude = sharedCurrentLatitude,&#10;                    onCurrentLatitudeChange = { sharedCurrentLatitude = it },&#10;                    sharedCurrentLongitude = sharedCurrentLongitude,&#10;                    onCurrentLongitudeChange = { sharedCurrentLongitude = it }&#10;                )&#10;                1 -&gt; JavaWeatherContent(&#10;                    sharedZipCodeInput = sharedZipCodeInput,&#10;                    onZipCodeInputChange = { sharedZipCodeInput = it },&#10;                    sharedCurrentLocation = sharedCurrentLocation,&#10;                    onCurrentLocationChange = { sharedCurrentLocation = it },&#10;                    sharedCurrentLatitude = sharedCurrentLatitude,&#10;                    onCurrentLatitudeChange = { sharedCurrentLatitude = it },&#10;                    sharedCurrentLongitude = sharedCurrentLongitude,&#10;                    onCurrentLongitudeChange = { sharedCurrentLongitude = it }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun KotlinWeatherContent(&#10;    sharedZipCodeInput: String,&#10;    onZipCodeInputChange: (String) -&gt; Unit,&#10;    sharedCurrentLocation: String,&#10;    onCurrentLocationChange: (String) -&gt; Unit,&#10;    sharedCurrentLatitude: Double,&#10;    onCurrentLatitudeChange: (Double) -&gt; Unit,&#10;    sharedCurrentLongitude: Double,&#10;    onCurrentLongitudeChange: (Double) -&gt; Unit&#10;) {&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var weatherJson by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var currentWeatherIcon by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var currentWeatherDescription by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    // Use shared state instead of local state&#10;    var zipCodeInput by remember { mutableStateOf(sharedZipCodeInput) }&#10;    var currentLocation by remember { mutableStateOf(sharedCurrentLocation) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;    val repository = remember { KotlinWeatherRepository() }&#10;    val context = LocalContext.current&#10;    val locationManager = remember { LocationManager(context) }&#10;    val locationRepository = remember { LocationRepository(context) }&#10;&#10;    // States for dropdown functionality&#10;    var savedLocations by remember { mutableStateOf&lt;List&lt;ZipCodeResponse&gt;&gt;(emptyList()) }&#10;    var isDropdownExpanded by remember { mutableStateOf(false) }&#10;    var isFocused by remember { mutableStateOf(false) }&#10;    var isUserTyping by remember { mutableStateOf(false) }&#10;&#10;    // Load saved locations from database&#10;    LaunchedEffect(Unit) {&#10;        locationRepository.getAllLocations().collect { locations -&gt;&#10;            savedLocations = locations&#10;        }&#10;    }&#10;&#10;    // Use shared coordinates instead of local coordinates&#10;    var currentLatitude by remember { mutableStateOf(sharedCurrentLatitude) }&#10;    var currentLongitude by remember { mutableStateOf(sharedCurrentLongitude) }&#10;    var hasTriedLocation by remember { mutableStateOf(false) }&#10;&#10;    // Sync local state with shared state when shared state changes&#10;    LaunchedEffect(sharedZipCodeInput) {&#10;        zipCodeInput = sharedZipCodeInput&#10;    }&#10;&#10;    LaunchedEffect(sharedCurrentLocation) {&#10;        currentLocation = sharedCurrentLocation&#10;    }&#10;&#10;    LaunchedEffect(sharedCurrentLatitude) {&#10;        currentLatitude = sharedCurrentLatitude&#10;    }&#10;&#10;    LaunchedEffect(sharedCurrentLongitude) {&#10;        currentLongitude = sharedCurrentLongitude&#10;    }&#10;&#10;    // Function to fetch weather data (moved before savedLocationsLauncher)&#10;    suspend fun fetchWeatherData(lat: Double, lon: Double, locationName: String) {&#10;        isLoading = true&#10;        errorMessage = null&#10;        weatherJson = null&#10;        currentWeatherIcon = null&#10;        currentWeatherDescription = null&#10;        currentLocation = locationName&#10;        onCurrentLocationChange(locationName)&#10;&#10;        // Update shared coordinates&#10;        onCurrentLatitudeChange(lat)&#10;        onCurrentLongitudeChange(lon)&#10;        currentLatitude = lat&#10;        currentLongitude = lon&#10;&#10;        try {&#10;            val result = repository.getWeatherDataAsJson(lat, lon)&#10;            result.fold(&#10;                onSuccess = { json -&gt;&#10;                    weatherJson = json&#10;                    isLoading = false&#10;                    Log.d(&quot;KotlinWeather&quot;, &quot;Weather JSON: $json&quot;)&#10;&#10;                    // Parse JSON to extract icon information&#10;                    try {&#10;                        val gson = Gson()&#10;                        val weatherResponse = gson.fromJson(json, WeatherResponse::class.java)&#10;                        weatherResponse.current?.weather?.firstOrNull()?.let { weather -&gt;&#10;                            currentWeatherIcon = weather.icon&#10;                            currentWeatherDescription = weather.description&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        Log.e(&quot;KotlinWeather&quot;, &quot;Error parsing weather data: ${e.message}&quot;)&#10;                    }&#10;&#10;                    // Save location to database if it was a zip code search&#10;                    if (zipCodeInput.isNotBlank()) {&#10;                        try {&#10;                            coroutineScope.launch {&#10;                                // First get the location data from the zip code&#10;                                val zipResult = repository.getLocationDataByZip(zipCodeInput.trim())&#10;                                zipResult.fold(&#10;                                    onSuccess = { zipCodeResponse -&gt;&#10;                                        // Save the location to database&#10;                                        locationRepository.saveLocation(zipCodeResponse)&#10;                                        Log.d(&quot;KotlinWeather&quot;, &quot;Location saved: ${zipCodeResponse.name}&quot;)&#10;                                    },&#10;                                    onFailure = { e -&gt;&#10;                                        Log.e(&quot;KotlinWeather&quot;, &quot;Failed to save location: ${e.message}&quot;)&#10;                                    }&#10;                                )&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            Log.e(&quot;KotlinWeather&quot;, &quot;Error saving location: ${e.message}&quot;)&#10;                        }&#10;                    }&#10;                },&#10;                onFailure = { exception -&gt;&#10;                    errorMessage = &quot;Error: ${exception.message}&quot;&#10;                    isLoading = false&#10;                }&#10;            )&#10;        } catch (e: Exception) {&#10;            errorMessage = &quot;Unexpected error: ${e.message}&quot;&#10;            isLoading = false&#10;        }&#10;    }&#10;&#10;    // Activity result launcher for saved locations&#10;    val savedLocationsLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            result.data?.let { data -&gt;&#10;                val selectedZip = data.getStringExtra(&quot;selected_zip&quot;)&#10;                val selectedName = data.getStringExtra(&quot;selected_name&quot;)&#10;                val selectedLat = data.getDoubleExtra(&quot;selected_lat&quot;, 0.0)&#10;                val selectedLon = data.getDoubleExtra(&quot;selected_lon&quot;, 0.0)&#10;&#10;                if (selectedZip != null &amp;&amp; selectedName != null) {&#10;                    zipCodeInput = selectedZip&#10;                    onZipCodeInputChange(selectedZip)&#10;                    currentLocation = selectedName&#10;                    onCurrentLocationChange(selectedName)&#10;                    currentLatitude = selectedLat&#10;                    onCurrentLatitudeChange(selectedLat)&#10;                    currentLongitude = selectedLon&#10;                    onCurrentLongitudeChange(selectedLon)&#10;&#10;                    // Fetch weather data for selected location&#10;                    coroutineScope.launch {&#10;                        fetchWeatherData(selectedLat, selectedLon, selectedName)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Permission launcher for location&#10;    val locationPermissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestMultiplePermissions()&#10;    ) { permissions -&gt;&#10;        val fineLocationGranted = permissions[Manifest.permission.ACCESS_FINE_LOCATION] ?: false&#10;        val coarseLocationGranted = permissions[Manifest.permission.ACCESS_COARSE_LOCATION] ?: false&#10;&#10;        coroutineScope.launch {&#10;            if (fineLocationGranted || coarseLocationGranted) {&#10;                // Permission granted, get location and fetch weather&#10;                try {&#10;                    locationManager.getCurrentLocation()?.let { locationData -&gt;&#10;                        currentLatitude = locationData.latitude&#10;                        currentLongitude = locationData.longitude&#10;                        onCurrentLatitudeChange(locationData.latitude)&#10;                        onCurrentLongitudeChange(locationData.longitude)&#10;                        fetchWeatherData(locationData.latitude, locationData.longitude, locationData.locationName)&#10;                    } ?: run {&#10;                        // Location unavailable, use default coordinates&#10;                        currentLocation = &quot;Duluth, MN (46.8384°N, 92.1800°W)&quot;&#10;                        onCurrentLocationChange(currentLocation)&#10;                        fetchWeatherData(currentLatitude, currentLongitude, currentLocation)&#10;                    }&#10;                } catch (e: Exception) {&#10;                    Log.e(&quot;KotlinWeather&quot;, &quot;Error getting location: ${e.message}&quot;)&#10;                    // Fallback to default coordinates&#10;                    currentLocation = &quot;Duluth, MN (46.8384°N, 92.1800°W)&quot;&#10;                    onCurrentLocationChange(currentLocation)&#10;                    fetchWeatherData(currentLatitude, currentLongitude, currentLocation)&#10;                }&#10;            } else {&#10;                // Permission denied, use default coordinates&#10;                currentLocation = &quot;Duluth, MN (46.8384°N, 92.1800°W)&quot;&#10;                onCurrentLocationChange(currentLocation)&#10;                fetchWeatherData(currentLatitude, currentLongitude, currentLocation)&#10;            }&#10;            hasTriedLocation = true&#10;        }&#10;    }&#10;&#10;    // Auto-fetch location and weather data on first load&#10;    LaunchedEffect(Unit) {&#10;        if (!hasTriedLocation) {&#10;            if (locationManager.hasLocationPermission()) {&#10;                // Permission already granted, get location&#10;                try {&#10;                    locationManager.getCurrentLocation()?.let { locationData -&gt;&#10;                        currentLatitude = locationData.latitude&#10;                        currentLongitude = locationData.longitude&#10;                        onCurrentLatitudeChange(locationData.latitude)&#10;                        onCurrentLongitudeChange(locationData.longitude)&#10;                        fetchWeatherData(locationData.latitude, locationData.longitude, locationData.locationName)&#10;                    } ?: run {&#10;                        // Location unavailable, use default coordinates&#10;                        currentLocation = &quot;Duluth, MN (46.8384°N, 92.1800°W)&quot;&#10;                        onCurrentLocationChange(currentLocation)&#10;                        fetchWeatherData(currentLatitude, currentLongitude, currentLocation)&#10;                    }&#10;                } catch (e: Exception) {&#10;                    Log.e(&quot;KotlinWeather&quot;, &quot;Error getting location: ${e.message}&quot;)&#10;                    // Fallback to default coordinates&#10;                    currentLocation = &quot;Duluth, MN (46.8384°N, 92.1800°W)&quot;&#10;                    onCurrentLocationChange(currentLocation)&#10;                    fetchWeatherData(currentLatitude, currentLongitude, currentLocation)&#10;                }&#10;            } else {&#10;                // Request location permission&#10;                locationPermissionLauncher.launch(&#10;                    arrayOf(&#10;                        Manifest.permission.ACCESS_FINE_LOCATION,&#10;                        Manifest.permission.ACCESS_COARSE_LOCATION&#10;                    )&#10;                )&#10;            }&#10;            hasTriedLocation = true&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState()),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = &quot;Kotlin Weather Implementation&quot;,&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        Text(&#10;            text = &quot;Location: $currentLocation&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Zip Code Search Field with Dropdown&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 8.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = zipCodeInput,&#10;                onValueChange = {&#10;                    val previousValue = zipCodeInput&#10;                    zipCodeInput = it&#10;                    isUserTyping = true&#10;&#10;                    // Show dropdown when user types and there are saved locations&#10;                    if (it.isNotEmpty() &amp;&amp; savedLocations.isNotEmpty()) {&#10;                        isDropdownExpanded = true&#10;                    } else if (it.isEmpty() &amp;&amp; savedLocations.isNotEmpty()) {&#10;                        // If user clears the field, show all locations&#10;                        isDropdownExpanded = true&#10;                    } else {&#10;                        isDropdownExpanded = false&#10;                    }&#10;                },&#10;                label = { Text(&quot;Enter Zip Code&quot;) },&#10;                placeholder = { Text(&quot;e.g., 90210&quot;) },&#10;                singleLine = true,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable {&#10;                        if (savedLocations.isNotEmpty()) {&#10;                            isUserTyping = false // User clicked, not typing&#10;                            isDropdownExpanded = !isDropdownExpanded&#10;                        }&#10;                    },&#10;                enabled = !isLoading,&#10;                trailingIcon = {&#10;                    if (savedLocations.isNotEmpty()) {&#10;                        IconButton(&#10;                            onClick = {&#10;                                isUserTyping = false // User clicked icon, not typing&#10;                                isDropdownExpanded = !isDropdownExpanded&#10;                            }&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = if (isDropdownExpanded) Icons.Filled.ExpandLess else Icons.Filled.ExpandMore,&#10;                                contentDescription = if (isDropdownExpanded) &quot;Collapse dropdown&quot; else &quot;Expand dropdown&quot;,&#10;                                tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            )&#10;&#10;            // Dropdown Menu using stable Material3 API&#10;            DropdownMenu(&#10;                expanded = isDropdownExpanded,&#10;                onDismissRequest = { isDropdownExpanded = false },&#10;                modifier = Modifier&#10;                    .fillMaxWidth(0.9f)&#10;                    .heightIn(max = 200.dp) // Limit height and allow scrolling&#10;            ) {&#10;                // Filter saved locations based on user interaction&#10;                val filteredLocations = if (!isUserTyping || zipCodeInput.isEmpty()) {&#10;                    // Show all locations when user clicked to open dropdown or field is empty&#10;                    savedLocations.take(8) // Show first 8 when no filter&#10;                } else {&#10;                    // Filter only when user is actively typing&#10;                    savedLocations.filter { location -&gt;&#10;                        location.zip.contains(zipCodeInput, ignoreCase = true) ||&#10;                        location.name.contains(zipCodeInput, ignoreCase = true)&#10;                    }.take(5) // Limit to 5 most recent matches&#10;                }&#10;&#10;                if (filteredLocations.isEmpty()) {&#10;                    // Show &quot;No results&quot; item&#10;                    DropdownMenuItem(&#10;                        text = {&#10;                            Text(&#10;                                text = if (zipCodeInput.isEmpty()) &quot;No saved locations&quot; else &quot;No matching saved locations&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                            )&#10;                        },&#10;                        onClick = { },&#10;                        enabled = false&#10;                    )&#10;                } else {&#10;                    // Show filtered saved locations&#10;                    filteredLocations.forEach { location -&gt;&#10;                        DropdownMenuItem(&#10;                            text = {&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxWidth()&#10;                                ) {&#10;                                    Text(&#10;                                        text = location.name,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        fontWeight = FontWeight.Medium,&#10;                                        maxLines = 1,&#10;                                        overflow = androidx.compose.ui.text.style.TextOverflow.Ellipsis&#10;                                    )&#10;                                    Text(&#10;                                        text = &quot;Zip: ${location.zip}&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f),&#10;                                        maxLines = 1&#10;                                    )&#10;                                }&#10;                            },&#10;                            onClick = {&#10;                                // Set the zip code and fetch weather data&#10;                                zipCodeInput = location.zip&#10;                                onZipCodeInputChange(location.zip) // Update shared state&#10;                                currentLocation = location.name&#10;                                onCurrentLocationChange(location.name) // Update shared state&#10;                                isDropdownExpanded = false&#10;&#10;                                // Fetch weather data for selected location using stored coordinates&#10;                                coroutineScope.launch {&#10;                                    fetchWeatherData(location.lat, location.lon, location.name)&#10;                                }&#10;                            },&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        )&#10;                    }&#10;&#10;                    // Show divider and &quot;View all&quot; option if there are many saved locations&#10;                    if (savedLocations.size &gt; 8) {&#10;                        HorizontalDivider(&#10;                            modifier = Modifier.padding(vertical = 4.dp),&#10;                            thickness = 1.dp,&#10;                            color = MaterialTheme.colorScheme.outline.copy(alpha = 0.3f)&#10;                        )&#10;                        DropdownMenuItem(&#10;                            text = {&#10;                                Row(&#10;                                    modifier = Modifier.fillMaxWidth(),&#10;                                    horizontalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;View all saved locations...&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        fontStyle = androidx.compose.ui.text.font.FontStyle.Italic,&#10;                                        color = MaterialTheme.colorScheme.primary&#10;                                    )&#10;                                }&#10;                            },&#10;                            onClick = {&#10;                                isDropdownExpanded = false&#10;                                val intent = Intent(context, SavedLocationsActivity::class.java)&#10;                                savedLocationsLauncher.launch(intent)&#10;                            },&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Button Row - Fetch Weather Data and View Saved Locations&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            Button(&#10;                onClick = {&#10;                    coroutineScope.launch {&#10;                        isLoading = true&#10;                        errorMessage = null&#10;                        weatherJson = null&#10;                        currentWeatherIcon = null&#10;                        currentWeatherDescription = null&#10;&#10;                        try {&#10;                            val result = if (zipCodeInput.isNotBlank()) {&#10;                                // Use zip code search&#10;                                currentLocation = &quot;Zip Code: ${zipCodeInput.trim()}&quot;&#10;                                repository.getWeatherDataByZip(zipCodeInput.trim())&#10;                            } else {&#10;                                // Use default coordinates&#10;                                currentLocation = &quot;Duluth, MN (46.8384°N, 92.1800°W)&quot;&#10;                                repository.getWeatherDataAsJson(currentLatitude, currentLongitude)&#10;                            }&#10;&#10;                            result.fold(&#10;                                onSuccess = { json -&gt;&#10;                                    weatherJson = json&#10;                                    isLoading = false&#10;                                    Log.d(&quot;KotlinWeather&quot;, &quot;Weather JSON: $json&quot;)&#10;&#10;                                    // Parse JSON to extract icon information&#10;                                    try {&#10;                                        val gson = Gson()&#10;                                        val weatherResponse = gson.fromJson(json, WeatherResponse::class.java)&#10;                                        weatherResponse.current?.weather?.firstOrNull()?.let { weather -&gt;&#10;                                            currentWeatherIcon = weather.icon&#10;                                            currentWeatherDescription = weather.description&#10;                                        }&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;KotlinWeather&quot;, &quot;Error parsing weather data: ${e.message}&quot;)&#10;                                    }&#10;&#10;                                    // Save location to database if it was a zip code search&#10;                                    if (zipCodeInput.isNotBlank()) {&#10;                                        try {&#10;                                            coroutineScope.launch {&#10;                                                // First get the location data from the zip code&#10;                                                val zipResult = repository.getLocationDataByZip(zipCodeInput.trim())&#10;                                                zipResult.fold(&#10;                                                    onSuccess = { zipCodeResponse -&gt;&#10;                                                        // Save the location to database&#10;                                                        locationRepository.saveLocation(zipCodeResponse)&#10;                                                        Log.d(&quot;KotlinWeather&quot;, &quot;Location saved: ${zipCodeResponse.name}&quot;)&#10;                                                    },&#10;                                                    onFailure = { e -&gt;&#10;                                                        Log.e(&quot;KotlinWeather&quot;, &quot;Failed to save location: ${e.message}&quot;)&#10;                                                    }&#10;                                                )&#10;                                            }&#10;                                        } catch (e: Exception) {&#10;                                            Log.e(&quot;KotlinWeather&quot;, &quot;Error saving location: ${e.message}&quot;)&#10;                                        }&#10;                                    }&#10;                                },&#10;                                onFailure = { exception -&gt;&#10;                                    errorMessage = &quot;Error: ${exception.message}&quot;&#10;                                    isLoading = false&#10;                                }&#10;                            )&#10;                        } catch (e: Exception) {&#10;                            errorMessage = &quot;Unexpected error: ${e.message}&quot;&#10;                            isLoading = false&#10;                        }&#10;                    }&#10;                },&#10;                enabled = !isLoading,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&quot;Fetch Weather Data&quot;)&#10;            }&#10;&#10;            OutlinedButton(&#10;                onClick = {&#10;                    val intent = Intent(context, SavedLocationsActivity::class.java)&#10;                    savedLocationsLauncher.launch(intent)&#10;                },&#10;                enabled = !isLoading,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&quot;View Saved&quot;)&#10;            }&#10;        }&#10;&#10;        // Weather Icon Display&#10;        currentWeatherIcon?.let { iconCode -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .padding(bottom = 16.dp)&#10;                    .clip(RoundedCornerShape(16.dp))&#10;                    .clickable {&#10;                        weatherJson?.let { json -&gt;&#10;                            val gson = Gson()&#10;                            val weatherResponse = try {&#10;                                gson.fromJson(json, WeatherResponse::class.java)&#10;                            } catch (e: Exception) {&#10;                                null&#10;                            }&#10;&#10;                            weatherResponse?.current?.let { current -&gt;&#10;                                val intent = Intent(context, CurrentWeatherDetailActivity::class.java).apply {&#10;                                    putExtra(&quot;current_weather_json&quot;, gson.toJson(current))&#10;                                    putExtra(&quot;location&quot;, currentLocation)&#10;                                }&#10;                                context.startActivity(intent)&#10;                            }&#10;                        }&#10;                    },&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // Current day and date&#10;                    val currentDate = java.util.Date()&#10;                    val dayFormatter = java.text.SimpleDateFormat(&quot;EEEE&quot;, java.util.Locale.getDefault())&#10;                    val dateFormatter = java.text.SimpleDateFormat(&quot;MMM d&quot;, java.util.Locale.getDefault())&#10;&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = dayFormatter.format(currentDate),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(&#10;                            text = dateFormatter.format(currentDate),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                        )&#10;                    }&#10;&#10;                    AsyncImage(&#10;                        model = &quot;https://openweathermap.org/img/wn/${iconCode}@2x.png&quot;,&#10;                        contentDescription = currentWeatherDescription ?: &quot;Weather icon&quot;,&#10;                        modifier = Modifier.size(80.dp)&#10;                    )&#10;&#10;                    currentWeatherDescription?.let { description -&gt;&#10;                        Text(&#10;                            text = description.replaceFirstChar { it.uppercase() },&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            modifier = Modifier.padding(top = 8.dp, bottom = 8.dp)&#10;                        )&#10;                    }&#10;&#10;                    // Parse weather data for temperature and wind info&#10;                    weatherJson?.let { json -&gt;&#10;                        val gson = Gson()&#10;                        val weatherResponse = try {&#10;                            gson.fromJson(json, WeatherResponse::class.java)&#10;                        } catch (e: Exception) {&#10;                            Log.e(&quot;KotlinWeather&quot;, &quot;Error parsing weather display data: ${e.message}&quot;)&#10;                            null&#10;                        }&#10;&#10;                        weatherResponse?.current?.let { current -&gt;&#10;                            // Temperature display&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                modifier = Modifier.padding(bottom = 8.dp)&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;${current.temp.toInt()}°F&quot;,&#10;                                    style = MaterialTheme.typography.headlineMedium,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                            }&#10;&#10;                            // Wind speed and direction display&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                horizontalArrangement = Arrangement.Center&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;Wind: ${current.windSpeed.toInt()} mph &quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;&#10;                                // Wind direction arrow&#10;                                Text(&#10;                                    text = &quot;↑&quot;,&#10;                                    style = MaterialTheme.typography.headlineSmall,&#10;                                    modifier = Modifier.graphicsLayer {&#10;                                        rotationZ = current.windDeg.toFloat()&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Hourly Weather Forecast Row&#10;        weatherJson?.let { json -&gt;&#10;            val gson = Gson()&#10;            val weatherResponse = try {&#10;                gson.fromJson(json, WeatherResponse::class.java)&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;KotlinWeather&quot;, &quot;Error parsing hourly weather data: ${e.message}&quot;)&#10;                null&#10;            }&#10;&#10;            weatherResponse?.hourly?.take(24)?.let { hourlyWeather -&gt;&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;24-Hour Forecast&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    LazyRow(&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                        contentPadding = PaddingValues(horizontal = 4.dp)&#10;                    ) {&#10;                        items(hourlyWeather) { hour -&gt;&#10;                            Card(&#10;                                modifier = Modifier&#10;                                    .width(100.dp)&#10;                                    .clip(RoundedCornerShape(16.dp)),&#10;                                colors = CardDefaults.cardColors(&#10;                                    containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;                                )&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier&#10;                                        .padding(8.dp)&#10;                                        .fillMaxWidth(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally&#10;                                ) {&#10;                                    // Time&#10;                                    val timeFormatter = java.text.SimpleDateFormat(&quot;h a&quot;, java.util.Locale.getDefault())&#10;                                    val date = java.util.Date(hour.dt * 1000)&#10;&#10;                                    Text(&#10;                                        text = timeFormatter.format(date),&#10;                                        style = MaterialTheme.typography.labelSmall,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        modifier = Modifier.padding(bottom = 4.dp)&#10;                                    )&#10;&#10;                                    // Weather icon&#10;                                    hour.weather.firstOrNull()?.let { weather -&gt;&#10;                                        AsyncImage(&#10;                                            model = &quot;https://openweathermap.org/img/wn/${weather.icon}@2x.png&quot;,&#10;                                            contentDescription = weather.description,&#10;                                            modifier = Modifier&#10;                                                .size(40.dp)&#10;                                                .padding(bottom = 4.dp)&#10;                                        )&#10;                                    }&#10;&#10;                                    // Temperature&#10;                                    Text(&#10;                                        text = &quot;${hour.temp.toInt()}°&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        modifier = Modifier.padding(bottom = 4.dp)&#10;                                    )&#10;&#10;                                    // Wind speed with direction&#10;                                    Row(&#10;                                        horizontalArrangement = Arrangement.Center,&#10;                                        verticalAlignment = Alignment.CenterVertically&#10;                                    ) {&#10;                                        Text(&#10;                                            text = &quot;${hour.windSpeed.toInt()}&quot;,&#10;                                            style = MaterialTheme.typography.labelSmall&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;↑&quot;,&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            modifier = Modifier.graphicsLayer {&#10;                                                rotationZ = hour.windDeg.toFloat()&#10;                                            }&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Daily Weather Forecast Row&#10;        weatherJson?.let { json -&gt;&#10;            val gson = Gson()&#10;            val weatherResponse = try {&#10;                gson.fromJson(json, WeatherResponse::class.java)&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;KotlinWeather&quot;, &quot;Error parsing daily weather data: ${e.message}&quot;)&#10;                null&#10;            }&#10;&#10;            weatherResponse?.daily?.let { dailyWeather -&gt;&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;7-Day Forecast&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    LazyRow(&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                        contentPadding = PaddingValues(horizontal = 4.dp)&#10;                    ) {&#10;                        items(dailyWeather) { day -&gt;&#10;                            Card(&#10;                                modifier = Modifier&#10;                                    .width(120.dp)&#10;                                    .clip(RoundedCornerShape(16.dp))&#10;                                    .clickable {&#10;                                        val gson = Gson()&#10;                                        val intent = Intent(context, DailyWeatherDetailActivity::class.java).apply {&#10;                                            putExtra(&quot;daily_weather_json&quot;, gson.toJson(day))&#10;                                            putExtra(&quot;location&quot;, currentLocation)&#10;                                        }&#10;                                        context.startActivity(intent)&#10;                                    },&#10;                                colors = CardDefaults.cardColors(&#10;                                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                                )&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier&#10;                                        .padding(12.dp)&#10;                                        .fillMaxWidth(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally&#10;                                ) {&#10;                                    // Day of week and date&#10;                                    val dayFormatter = java.text.SimpleDateFormat(&quot;EEE&quot;, java.util.Locale.getDefault())&#10;                                    val dateFormatter = java.text.SimpleDateFormat(&quot;MMM d&quot;, java.util.Locale.getDefault())&#10;                                    val date = java.util.Date(day.dt * 1000)&#10;&#10;                                    Row(&#10;                                        verticalAlignment = Alignment.CenterVertically,&#10;                                        modifier = Modifier.padding(bottom = 8.dp)&#10;                                    ) {&#10;                                        Text(&#10;                                            text = dayFormatter.format(date),&#10;                                            style = MaterialTheme.typography.bodySmall,&#10;                                            fontWeight = FontWeight.Bold&#10;                                        )&#10;                                        Spacer(modifier = Modifier.width(4.dp))&#10;                                        Text(&#10;                                            text = dateFormatter.format(date),&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                                        )&#10;                                    }&#10;&#10;                                    // Weather icon&#10;                                    day.weather.firstOrNull()?.let { weather -&gt;&#10;                                        AsyncImage(&#10;                                            model = &quot;https://openweathermap.org/img/wn/${weather.icon}@2x.png&quot;,&#10;                                            contentDescription = weather.description,&#10;                                            modifier = Modifier&#10;                                                .size(48.dp)&#10;                                                .padding(bottom = 8.dp)&#10;                                        )&#10;                                    }&#10;&#10;                                    // High/Low temperatures with labels&#10;                                    Row(&#10;                                        horizontalArrangement = Arrangement.Center,&#10;                                        verticalAlignment = Alignment.CenterVertically,&#10;                                        modifier = Modifier.padding(bottom = 4.dp)&#10;                                    ) {&#10;                                        Text(&#10;                                            text = &quot;High: &quot;,&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            fontWeight = FontWeight.Bold&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;${day.temp.max.toInt()}°&quot;,&#10;                                            style = MaterialTheme.typography.bodySmall&#10;                                        )&#10;                                    }&#10;&#10;                                    Row(&#10;                                        horizontalArrangement = Arrangement.Center,&#10;                                        verticalAlignment = Alignment.CenterVertically,&#10;                                        modifier = Modifier.padding(bottom = 8.dp)&#10;                                    ) {&#10;                                        Text(&#10;                                            text = &quot;Low: &quot;,&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            fontWeight = FontWeight.Bold&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;${day.temp.min.toInt()}°&quot;,&#10;                                            style = MaterialTheme.typography.bodySmall&#10;                                        )&#10;                                    }&#10;&#10;                                    // Wind info with label&#10;                                    Row(&#10;                                        horizontalArrangement = Arrangement.Center,&#10;                                        verticalAlignment = Alignment.CenterVertically&#10;                                    ) {&#10;                                        Text(&#10;                                            text = &quot;Wind: &quot;,&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            fontWeight = FontWeight.Bold&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;${day.windSpeed.toInt()}&quot;,&#10;                                            style = MaterialTheme.typography.labelSmall&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;↑&quot;,&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            modifier = Modifier.graphicsLayer {&#10;                                                rotationZ = day.windDeg.toFloat()&#10;                                            }&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        if (isLoading) {&#10;            CircularProgressIndicator(&#10;                modifier = Modifier.padding(16.dp)&#10;            )&#10;        }&#10;&#10;        errorMessage?.let { error -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.errorContainer&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = error,&#10;                    modifier = Modifier.padding(16.dp),&#10;                    color = MaterialTheme.colorScheme.onErrorContainer&#10;                )&#10;            }&#10;        }&#10;&#10;        weatherJson?.let { json -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Weather Data (JSON):&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;                    Text(&#10;                        text = json,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun JavaWeatherContent(&#10;    sharedZipCodeInput: String,&#10;    onZipCodeInputChange: (String) -&gt; Unit,&#10;    sharedCurrentLocation: String,&#10;    onCurrentLocationChange: (String) -&gt; Unit,&#10;    sharedCurrentLatitude: Double,&#10;    onCurrentLatitudeChange: (Double) -&gt; Unit,&#10;    sharedCurrentLongitude: Double,&#10;    onCurrentLongitudeChange: (Double) -&gt; Unit&#10;) {&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var weatherJson by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var currentWeatherIcon by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var currentWeatherDescription by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    // Use shared state instead of local state&#10;    var zipCodeInput by remember { mutableStateOf(sharedZipCodeInput) }&#10;    var currentLocation by remember { mutableStateOf(sharedCurrentLocation) }&#10;    val repository = remember { JavaWeatherRepository() }&#10;    val context = LocalContext.current&#10;    val locationManager = remember { LocationManager(context) }&#10;    val locationRepository = remember { LocationRepository(context) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    // States for dropdown functionality&#10;    var savedLocations by remember { mutableStateOf&lt;List&lt;ZipCodeResponse&gt;&gt;(emptyList()) }&#10;    var isDropdownExpanded by remember { mutableStateOf(false) }&#10;    var isUserTyping by remember { mutableStateOf(false) }&#10;&#10;    // Load saved locations from database&#10;    LaunchedEffect(Unit) {&#10;        locationRepository.getAllLocations().collect { locations -&gt;&#10;            savedLocations = locations&#10;        }&#10;    }&#10;&#10;    // Use shared coordinates instead of local coordinates&#10;    var currentLatitude by remember { mutableStateOf(sharedCurrentLatitude) }&#10;    var currentLongitude by remember { mutableStateOf(sharedCurrentLongitude) }&#10;    var hasTriedLocation by remember { mutableStateOf(false) }&#10;&#10;    // Sync local state with shared state when shared state changes&#10;    LaunchedEffect(sharedZipCodeInput) {&#10;        zipCodeInput = sharedZipCodeInput&#10;    }&#10;&#10;    LaunchedEffect(sharedCurrentLocation) {&#10;        currentLocation = sharedCurrentLocation&#10;    }&#10;&#10;    LaunchedEffect(sharedCurrentLatitude) {&#10;        currentLatitude = sharedCurrentLatitude&#10;    }&#10;&#10;    LaunchedEffect(sharedCurrentLongitude) {&#10;        currentLongitude = sharedCurrentLongitude&#10;    }&#10;&#10;    // Function to fetch weather data (updated to use shared state)&#10;    fun fetchWeatherData(lat: Double, lon: Double, locationName: String) {&#10;        isLoading = true&#10;        errorMessage = null&#10;        weatherJson = null&#10;        currentWeatherIcon = null&#10;        currentWeatherDescription = null&#10;        currentLocation = locationName&#10;        onCurrentLocationChange(locationName)&#10;&#10;        // Update shared coordinates&#10;        onCurrentLatitudeChange(lat)&#10;        onCurrentLongitudeChange(lon)&#10;        currentLatitude = lat&#10;        currentLongitude = lon&#10;&#10;        repository.getWeatherDataAsJson(lat, lon, object : JavaWeatherRepository.JsonDataCallback {&#10;            override fun onSuccess(jsonData: String) {&#10;                weatherJson = jsonData&#10;                isLoading = false&#10;                Log.d(&quot;JavaWeather&quot;, &quot;Weather JSON: $jsonData&quot;)&#10;&#10;                // Parse JSON to extract icon information&#10;                try {&#10;                    val gson = Gson()&#10;                    val weatherResponse = gson.fromJson(jsonData, WeatherResponse::class.java)&#10;                    weatherResponse.current?.weather?.firstOrNull()?.let { weather -&gt;&#10;                        currentWeatherIcon = weather.icon&#10;                        currentWeatherDescription = weather.description&#10;                    }&#10;                } catch (e: Exception) {&#10;                    Log.e(&quot;JavaWeather&quot;, &quot;Error parsing weather data: ${e.message}&quot;)&#10;                }&#10;            }&#10;&#10;            override fun onError(error: String) {&#10;                errorMessage = &quot;Error: $error&quot;&#10;                isLoading = false&#10;            }&#10;        })&#10;    }&#10;&#10;    // Activity result launcher for saved locations&#10;    val savedLocationsLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            result.data?.let { data -&gt;&#10;                val selectedZip = data.getStringExtra(&quot;selected_zip&quot;)&#10;                val selectedName = data.getStringExtra(&quot;selected_name&quot;)&#10;                val selectedLat = data.getDoubleExtra(&quot;selected_lat&quot;, 0.0)&#10;                val selectedLon = data.getDoubleExtra(&quot;selected_lon&quot;, 0.0)&#10;&#10;                if (selectedZip != null &amp;&amp; selectedName != null) {&#10;                    zipCodeInput = selectedZip&#10;                    onZipCodeInputChange(selectedZip)&#10;                    currentLocation = selectedName&#10;                    onCurrentLocationChange(selectedName)&#10;                    currentLatitude = selectedLat&#10;                    onCurrentLatitudeChange(selectedLat)&#10;                    currentLongitude = selectedLon&#10;                    onCurrentLongitudeChange(selectedLon)&#10;&#10;                    // Fetch weather data for selected location&#10;                    fetchWeatherData(selectedLat, selectedLon, selectedName)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Permission launcher for location&#10;    val locationPermissionLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.RequestMultiplePermissions()&#10;    ) { permissions -&gt;&#10;        val fineLocationGranted = permissions[Manifest.permission.ACCESS_FINE_LOCATION] ?: false&#10;        val coarseLocationGranted = permissions[Manifest.permission.ACCESS_COARSE_LOCATION] ?: false&#10;&#10;        if (fineLocationGranted || coarseLocationGranted) {&#10;            // Permission granted, get location and fetch weather&#10;            isLoading = true&#10;            errorMessage = null&#10;            weatherJson = null&#10;            currentWeatherIcon = null&#10;            currentWeatherDescription = null&#10;&#10;            repository.getCurrentLocationAndWeather(object : JavaWeatherRepository.LocationWeatherCallback {&#10;                override fun onLocationReceived(latitude: Double, longitude: Double, locationName: String) {&#10;                    currentLatitude = latitude&#10;                    currentLongitude = longitude&#10;                    onCurrentLatitudeChange(latitude)&#10;                    onCurrentLongitudeChange(longitude)&#10;                    currentLocation = locationName&#10;                    onCurrentLocationChange(locationName)&#10;                }&#10;&#10;                override fun onWeatherSuccess(jsonData: String) {&#10;                    weatherJson = jsonData&#10;                    isLoading = false&#10;                    Log.d(&quot;JavaWeather&quot;, &quot;Weather JSON: $jsonData&quot;)&#10;&#10;                    // Parse JSON to extract icon information&#10;                    try {&#10;                        val gson = Gson()&#10;                        val weatherResponse = gson.fromJson(jsonData, WeatherResponse::class.java)&#10;                        weatherResponse.current?.weather?.firstOrNull()?.let { weather -&gt;&#10;                            currentWeatherIcon = weather.icon&#10;                            currentWeatherDescription = weather.description&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        Log.e(&quot;JavaWeather&quot;, &quot;Error parsing weather data: ${e.message}&quot;)&#10;                    }&#10;                }&#10;&#10;                override fun onError(error: String) {&#10;                    errorMessage = error&#10;                    isLoading = false&#10;                    // Fallback to default coordinates on error&#10;                    currentLocation = &quot;Duluth, MN (46.8384°N, 92.1800°W)&quot;&#10;                    onCurrentLocationChange(currentLocation)&#10;                    repository.getWeatherDataAsJson(currentLatitude, currentLongitude, object : JavaWeatherRepository.JsonDataCallback {&#10;                        override fun onSuccess(jsonData: String) {&#10;                            weatherJson = jsonData&#10;                            isLoading = false&#10;                            Log.d(&quot;JavaWeather&quot;, &quot;Weather JSON (fallback): $jsonData&quot;)&#10;&#10;                            try {&#10;                                val gson = Gson()&#10;                                val weatherResponse = gson.fromJson(jsonData, WeatherResponse::class.java)&#10;                                weatherResponse.current?.weather?.firstOrNull()?.let { weather -&gt;&#10;                                    currentWeatherIcon = weather.icon&#10;                                    currentWeatherDescription = weather.description&#10;                                }&#10;                            } catch (e: Exception) {&#10;                                Log.e(&quot;JavaWeather&quot;, &quot;Error parsing fallback weather data: ${e.message}&quot;)&#10;                            }&#10;                        }&#10;&#10;                        override fun onError(fallbackError: String) {&#10;                            errorMessage = &quot;Location error: $error, Weather error: $fallbackError&quot;&#10;                            isLoading = false&#10;                        }&#10;                    })&#10;                }&#10;            }, context)&#10;        } else {&#10;            // Permission denied, use default coordinates&#10;            currentLocation = &quot;Duluth, MN (46.8384°N, 92.1800°W)&quot;&#10;            onCurrentLocationChange(currentLocation)&#10;            isLoading = true&#10;            repository.getWeatherDataAsJson(currentLatitude, currentLongitude, object : JavaWeatherRepository.JsonDataCallback {&#10;                override fun onSuccess(jsonData: String) {&#10;                    weatherJson = jsonData&#10;                    isLoading = false&#10;                    Log.d(&quot;JavaWeather&quot;, &quot;Weather JSON (default): $jsonData&quot;)&#10;&#10;                    try {&#10;                        val gson = Gson()&#10;                        val weatherResponse = gson.fromJson(jsonData, WeatherResponse::class.java)&#10;                        weatherResponse.current?.weather?.firstOrNull()?.let { weather -&gt;&#10;                            currentWeatherIcon = weather.icon&#10;                            currentWeatherDescription = weather.description&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        Log.e(&quot;JavaWeather&quot;, &quot;Error parsing default weather data: ${e.message}&quot;)&#10;                    }&#10;                }&#10;&#10;                override fun onError(defaultError: String) {&#10;                    errorMessage = defaultError&#10;                    isLoading = false&#10;                }&#10;            })&#10;        }&#10;        hasTriedLocation = true&#10;    }&#10;&#10;    // Auto-fetch location and weather data on first load&#10;    LaunchedEffect(Unit) {&#10;        if (!hasTriedLocation) {&#10;            if (locationManager.hasLocationPermission()) {&#10;                // Permission already granted, get location&#10;                isLoading = true&#10;                errorMessage = null&#10;                weatherJson = null&#10;                currentWeatherIcon = null&#10;                currentWeatherDescription = null&#10;&#10;                repository.getCurrentLocationAndWeather(object : JavaWeatherRepository.LocationWeatherCallback {&#10;                    override fun onLocationReceived(latitude: Double, longitude: Double, locationName: String) {&#10;                        currentLatitude = latitude&#10;                        currentLongitude = longitude&#10;                        onCurrentLatitudeChange(latitude)&#10;                        onCurrentLongitudeChange(longitude)&#10;                        currentLocation = locationName&#10;                        onCurrentLocationChange(locationName)&#10;                    }&#10;&#10;                    override fun onWeatherSuccess(jsonData: String) {&#10;                        weatherJson = jsonData&#10;                        isLoading = false&#10;                        Log.d(&quot;JavaWeather&quot;, &quot;Weather JSON: $jsonData&quot;)&#10;&#10;                        // Parse JSON to extract icon information&#10;                        try {&#10;                            val gson = Gson()&#10;                            val weatherResponse = gson.fromJson(jsonData, WeatherResponse::class.java)&#10;                            weatherResponse.current?.weather?.firstOrNull()?.let { weather -&gt;&#10;                                currentWeatherIcon = weather.icon&#10;                                currentWeatherDescription = weather.description&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            Log.e(&quot;JavaWeather&quot;, &quot;Error parsing weather data: ${e.message}&quot;)&#10;                        }&#10;                    }&#10;&#10;                    override fun onError(error: String) {&#10;                        errorMessage = error&#10;                        isLoading = false&#10;                        // Fallback to default coordinates on error&#10;                        currentLocation = &quot;Duluth, MN (46.8384°N, 92.1800°W)&quot;&#10;                        onCurrentLocationChange(currentLocation)&#10;                        repository.getWeatherDataAsJson(currentLatitude, currentLongitude, object : JavaWeatherRepository.JsonDataCallback {&#10;                            override fun onSuccess(jsonData: String) {&#10;                                weatherJson = jsonData&#10;                                isLoading = false&#10;                                Log.d(&quot;JavaWeather&quot;, &quot;Weather JSON (fallback): $jsonData&quot;)&#10;&#10;                                try {&#10;                                    val gson = Gson()&#10;                                    val weatherResponse = gson.fromJson(jsonData, WeatherResponse::class.java)&#10;                                    weatherResponse.current?.weather?.firstOrNull()?.let { weather -&gt;&#10;                                        currentWeatherIcon = weather.icon&#10;                                        currentWeatherDescription = weather.description&#10;                                    }&#10;                                } catch (e: Exception) {&#10;                                    Log.e(&quot;JavaWeather&quot;, &quot;Error parsing fallback weather data: ${e.message}&quot;)&#10;                                }&#10;                            }&#10;&#10;                            override fun onError(fallbackError: String) {&#10;                                errorMessage = &quot;Location error: $error, Weather error: $fallbackError&quot;&#10;                                isLoading = false&#10;                            }&#10;                        })&#10;                    }&#10;                }, context)&#10;            } else {&#10;                // Request location permission&#10;                locationPermissionLauncher.launch(&#10;                    arrayOf(&#10;                        Manifest.permission.ACCESS_FINE_LOCATION,&#10;                        Manifest.permission.ACCESS_COARSE_LOCATION&#10;                    )&#10;                )&#10;            }&#10;            hasTriedLocation = true&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState()),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = &quot;Java Weather Implementation&quot;,&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        Text(&#10;            text = &quot;Location: $currentLocation&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Zip Code Search Field with Dropdown&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 8.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = zipCodeInput,&#10;                onValueChange = {&#10;                    zipCodeInput = it&#10;                    onZipCodeInputChange(it) // Update shared state&#10;                    isUserTyping = true&#10;&#10;                    // Show dropdown when user types and there are saved locations&#10;                    if (it.isNotEmpty() &amp;&amp; savedLocations.isNotEmpty()) {&#10;                        isDropdownExpanded = true&#10;                    } else if (it.isEmpty() &amp;&amp; savedLocations.isNotEmpty()) {&#10;                        // If user clears the field, show all locations&#10;                        isDropdownExpanded = true&#10;                    } else {&#10;                        isDropdownExpanded = false&#10;                    }&#10;                },&#10;                label = { Text(&quot;Enter Zip Code&quot;) },&#10;                placeholder = { Text(&quot;e.g., 90210&quot;) },&#10;                singleLine = true,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable {&#10;                        if (savedLocations.isNotEmpty()) {&#10;                            isUserTyping = false // User clicked, not typing&#10;                            isDropdownExpanded = !isDropdownExpanded&#10;                        }&#10;                    },&#10;                enabled = !isLoading,&#10;                trailingIcon = {&#10;                    if (savedLocations.isNotEmpty()) {&#10;                        IconButton(&#10;                            onClick = {&#10;                                isUserTyping = false // User clicked icon, not typing&#10;                                isDropdownExpanded = !isDropdownExpanded&#10;                            }&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = if (isDropdownExpanded) Icons.Filled.ExpandLess else Icons.Filled.ExpandMore,&#10;                                contentDescription = if (isDropdownExpanded) &quot;Collapse dropdown&quot; else &quot;Expand dropdown&quot;,&#10;                                tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            )&#10;&#10;            // Dropdown Menu using stable Material3 API&#10;            DropdownMenu(&#10;                expanded = isDropdownExpanded,&#10;                onDismissRequest = { isDropdownExpanded = false },&#10;                modifier = Modifier&#10;                    .fillMaxWidth(0.9f)&#10;                    .heightIn(max = 200.dp) // Limit height and allow scrolling&#10;            ) {&#10;                // Filter saved locations based on user interaction&#10;                val filteredLocations = if (!isUserTyping || zipCodeInput.isEmpty()) {&#10;                    // Show all locations when user clicked to open dropdown or field is empty&#10;                    savedLocations.take(8) // Show first 8 when no filter&#10;                } else {&#10;                    // Filter only when user is actively typing&#10;                    savedLocations.filter { location -&gt;&#10;                        location.zip.contains(zipCodeInput, ignoreCase = true) ||&#10;                        location.name.contains(zipCodeInput, ignoreCase = true)&#10;                    }.take(5) // Limit to 5 most recent matches&#10;                }&#10;&#10;                if (filteredLocations.isEmpty()) {&#10;                    // Show &quot;No results&quot; item&#10;                    DropdownMenuItem(&#10;                        text = {&#10;                            Text(&#10;                                text = if (zipCodeInput.isEmpty()) &quot;No saved locations&quot; else &quot;No matching saved locations&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)&#10;                            )&#10;                        },&#10;                        onClick = { },&#10;                        enabled = false&#10;                    )&#10;                } else {&#10;                    // Show filtered saved locations&#10;                    filteredLocations.forEach { location -&gt;&#10;                        DropdownMenuItem(&#10;                            text = {&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxWidth()&#10;                                ) {&#10;                                    Text(&#10;                                        text = location.name,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        fontWeight = FontWeight.Medium,&#10;                                        maxLines = 1,&#10;                                        overflow = androidx.compose.ui.text.style.TextOverflow.Ellipsis&#10;                                    )&#10;                                    Text(&#10;                                        text = &quot;Zip: ${location.zip}&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f),&#10;                                        maxLines = 1&#10;                                    )&#10;                                }&#10;                            },&#10;                            onClick = {&#10;                                // Set the zip code and fetch weather data&#10;                                zipCodeInput = location.zip&#10;                                onZipCodeInputChange(location.zip) // Update shared state&#10;                                currentLocation = location.name&#10;                                onCurrentLocationChange(location.name) // Update shared state&#10;                                isDropdownExpanded = false&#10;&#10;                                // Fetch weather data for selected location using stored coordinates&#10;                                coroutineScope.launch {&#10;                                    fetchWeatherData(location.lat, location.lon, location.name)&#10;                                }&#10;                            },&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        )&#10;                    }&#10;&#10;                    // Show divider and &quot;View all&quot; option if there are many saved locations&#10;                    if (savedLocations.size &gt; 8) {&#10;                        HorizontalDivider(&#10;                            modifier = Modifier.padding(vertical = 4.dp),&#10;                            thickness = 1.dp,&#10;                            color = MaterialTheme.colorScheme.outline.copy(alpha = 0.3f)&#10;                        )&#10;                        DropdownMenuItem(&#10;                            text = {&#10;                                Row(&#10;                                    modifier = Modifier.fillMaxWidth(),&#10;                                    horizontalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;View all saved locations...&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall,&#10;                                        fontStyle = androidx.compose.ui.text.font.FontStyle.Italic,&#10;                                        color = MaterialTheme.colorScheme.primary&#10;                                    )&#10;                                }&#10;                            },&#10;                            onClick = {&#10;                                isDropdownExpanded = false&#10;                                val intent = Intent(context, SavedLocationsActivity::class.java)&#10;                                savedLocationsLauncher.launch(intent)&#10;                            },&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Button Row - Fetch Weather Data and View Saved Locations&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            Button(&#10;                onClick = {&#10;                    isLoading = true&#10;                    errorMessage = null&#10;                    weatherJson = null&#10;                    currentWeatherIcon = null&#10;                    currentWeatherDescription = null&#10;&#10;                    if (zipCodeInput.isNotBlank()) {&#10;                        // Use zip code search&#10;                        currentLocation = &quot;Zip Code: ${zipCodeInput.trim()}&quot;&#10;                        repository.getWeatherDataByZip(zipCodeInput.trim(), object : JavaWeatherRepository.JsonDataCallback {&#10;                            override fun onSuccess(jsonData: String) {&#10;                                weatherJson = jsonData&#10;                                isLoading = false&#10;                                Log.d(&quot;JavaWeather&quot;, &quot;Weather JSON (from zip): $jsonData&quot;)&#10;&#10;                                // Parse JSON to extract icon information&#10;                                try {&#10;                                    val gson = Gson()&#10;                                    val weatherResponse = gson.fromJson(jsonData, WeatherResponse::class.java)&#10;                                    weatherResponse.current?.weather?.firstOrNull()?.let { weather -&gt;&#10;                                        currentWeatherIcon = weather.icon&#10;                                        currentWeatherDescription = weather.description&#10;                                    }&#10;                                } catch (e: Exception) {&#10;                                    Log.e(&quot;JavaWeather&quot;, &quot;Error parsing weather data: ${e.message}&quot;)&#10;                                }&#10;                            }&#10;&#10;                            override fun onError(error: String) {&#10;                                errorMessage = error&#10;                                isLoading = false&#10;                            }&#10;                        })&#10;                    } else {&#10;                        // Use default coordinates&#10;                        currentLocation = &quot;Duluth, MN (46.8384°N, 92.1800°W)&quot;&#10;                        repository.getWeatherDataAsJson(currentLatitude, currentLongitude, object : JavaWeatherRepository.JsonDataCallback {&#10;                            override fun onSuccess(jsonData: String) {&#10;                                weatherJson = jsonData&#10;                                isLoading = false&#10;                                Log.d(&quot;JavaWeather&quot;, &quot;Weather JSON: $jsonData&quot;)&#10;&#10;                                // Parse JSON to extract icon information&#10;                                try {&#10;                                    val gson = Gson()&#10;                                    val weatherResponse = gson.fromJson(jsonData, WeatherResponse::class.java)&#10;                                    weatherResponse.current?.weather?.firstOrNull()?.let { weather -&gt;&#10;                                        currentWeatherIcon = weather.icon&#10;                                        currentWeatherDescription = weather.description&#10;                                    }&#10;                                } catch (e: Exception) {&#10;                                    Log.e(&quot;JavaWeather&quot;, &quot;Error parsing weather data: ${e.message}&quot;)&#10;                                }&#10;                            }&#10;&#10;                            override fun onError(error: String) {&#10;                                errorMessage = error&#10;                                isLoading = false&#10;                            }&#10;                        })&#10;                    }&#10;                },&#10;                enabled = !isLoading,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&quot;Fetch Weather Data&quot;)&#10;            }&#10;&#10;            OutlinedButton(&#10;                onClick = {&#10;                    val intent = Intent(context, SavedLocationsActivity::class.java)&#10;                    savedLocationsLauncher.launch(intent)&#10;                },&#10;                enabled = !isLoading,&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&quot;View Saved&quot;)&#10;            }&#10;        }&#10;&#10;        // Weather Icon Display&#10;        currentWeatherIcon?.let { iconCode -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .padding(bottom = 16.dp)&#10;                    .clip(RoundedCornerShape(16.dp))&#10;                    .clickable {&#10;                        weatherJson?.let { json -&gt;&#10;                            val gson = Gson()&#10;                            val weatherResponse = try {&#10;                                gson.fromJson(json, WeatherResponse::class.java)&#10;                            } catch (e: Exception) {&#10;                                null&#10;                            }&#10;&#10;                            weatherResponse?.current?.let { current -&gt;&#10;                                val intent = Intent(context, CurrentWeatherDetailActivity::class.java).apply {&#10;                                    putExtra(&quot;current_weather_json&quot;, gson.toJson(current))&#10;                                    putExtra(&quot;location&quot;, currentLocation)&#10;                                }&#10;                                context.startActivity(intent)&#10;                            }&#10;                        }&#10;                    },&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // Current day and date&#10;                    val currentDate = java.util.Date()&#10;                    val dayFormatter = java.text.SimpleDateFormat(&quot;EEEE&quot;, java.util.Locale.getDefault())&#10;                    val dateFormatter = java.text.SimpleDateFormat(&quot;MMM d&quot;, java.util.Locale.getDefault())&#10;&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = dayFormatter.format(currentDate),&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(&#10;                            text = dateFormatter.format(currentDate),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                        )&#10;                    }&#10;&#10;                    AsyncImage(&#10;                        model = &quot;https://openweathermap.org/img/wn/${iconCode}@2x.png&quot;,&#10;                        contentDescription = currentWeatherDescription ?: &quot;Weather icon&quot;,&#10;                        modifier = Modifier.size(80.dp)&#10;                    )&#10;&#10;                    currentWeatherDescription?.let { description -&gt;&#10;                        Text(&#10;                            text = description.replaceFirstChar { it.uppercase() },&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            modifier = Modifier.padding(top = 8.dp, bottom = 8.dp)&#10;                        )&#10;                    }&#10;&#10;                    // Parse weather data for temperature and wind info&#10;                    weatherJson?.let { json -&gt;&#10;                        val gson = Gson()&#10;                        val weatherResponse = try {&#10;                            gson.fromJson(json, WeatherResponse::class.java)&#10;                        } catch (e: Exception) {&#10;                            Log.e(&quot;JavaWeather&quot;, &quot;Error parsing weather display data: ${e.message}&quot;)&#10;                            null&#10;                        }&#10;&#10;                        weatherResponse?.current?.let { current -&gt;&#10;                            // Temperature display&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                modifier = Modifier.padding(bottom = 8.dp)&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;${current.temp.toInt()}°F&quot;,&#10;                                    style = MaterialTheme.typography.headlineMedium,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                            }&#10;&#10;                            // Wind speed and direction display&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                horizontalArrangement = Arrangement.Center&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;Wind: ${current.windSpeed.toInt()} mph &quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;&#10;                                // Wind direction arrow&#10;                                Text(&#10;                                    text = &quot;↑&quot;,&#10;                                    style = MaterialTheme.typography.headlineSmall,&#10;                                    modifier = Modifier.graphicsLayer {&#10;                                        rotationZ = current.windDeg.toFloat()&#10;                                    }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Hourly Weather Forecast Row&#10;        weatherJson?.let { json -&gt;&#10;            val gson = Gson()&#10;            val weatherResponse = try {&#10;                gson.fromJson(json, WeatherResponse::class.java)&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;JavaWeather&quot;, &quot;Error parsing hourly weather data: ${e.message}&quot;)&#10;                null&#10;            }&#10;&#10;            weatherResponse?.hourly?.take(24)?.let { hourlyWeather -&gt;&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;24-Hour Forecast&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    LazyRow(&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                        contentPadding = PaddingValues(horizontal = 4.dp)&#10;                    ) {&#10;                        items(hourlyWeather) { hour -&gt;&#10;                            Card(&#10;                                modifier = Modifier&#10;                                    .width(100.dp)&#10;                                    .clip(RoundedCornerShape(16.dp)),&#10;                                colors = CardDefaults.cardColors(&#10;                                    containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;                                )&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier&#10;                                        .padding(8.dp)&#10;                                        .fillMaxWidth(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally&#10;                                ) {&#10;                                    // Time&#10;                                    val timeFormatter = java.text.SimpleDateFormat(&quot;h a&quot;, java.util.Locale.getDefault())&#10;                                    val date = java.util.Date(hour.dt * 1000)&#10;&#10;                                    Text(&#10;                                        text = timeFormatter.format(date),&#10;                                        style = MaterialTheme.typography.labelSmall,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        modifier = Modifier.padding(bottom = 4.dp)&#10;                                    )&#10;&#10;                                    // Weather icon&#10;                                    hour.weather.firstOrNull()?.let { weather -&gt;&#10;                                        AsyncImage(&#10;                                            model = &quot;https://openweathermap.org/img/wn/${weather.icon}@2x.png&quot;,&#10;                                            contentDescription = weather.description,&#10;                                            modifier = Modifier&#10;                                                .size(40.dp)&#10;                                                .padding(bottom = 4.dp)&#10;                                        )&#10;                                    }&#10;&#10;                                    // Temperature&#10;                                    Text(&#10;                                        text = &quot;${hour.temp.toInt()}°&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        modifier = Modifier.padding(bottom = 4.dp)&#10;                                    )&#10;&#10;                                    // Wind speed with direction&#10;                                    Row(&#10;                                        horizontalArrangement = Arrangement.Center,&#10;                                        verticalAlignment = Alignment.CenterVertically&#10;                                    ) {&#10;                                        Text(&#10;                                            text = &quot;${hour.windSpeed.toInt()}&quot;,&#10;                                            style = MaterialTheme.typography.labelSmall&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;↑&quot;,&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            modifier = Modifier.graphicsLayer {&#10;                                                rotationZ = hour.windDeg.toFloat()&#10;                                            }&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Daily Weather Forecast Row&#10;        weatherJson?.let { json -&gt;&#10;            val gson = Gson()&#10;            val weatherResponse = try {&#10;                gson.fromJson(json, WeatherResponse::class.java)&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;JavaWeather&quot;, &quot;Error parsing daily weather data: ${e.message}&quot;)&#10;                null&#10;            }&#10;&#10;            weatherResponse?.daily?.let { dailyWeather -&gt;&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;7-Day Forecast&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    LazyRow(&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                        contentPadding = PaddingValues(horizontal = 4.dp)&#10;                    ) {&#10;                        items(dailyWeather) { day -&gt;&#10;                            Card(&#10;                                modifier = Modifier&#10;                                    .width(120.dp)&#10;                                    .clip(RoundedCornerShape(16.dp))&#10;                                    .clickable {&#10;                                        val gson = Gson()&#10;                                        val intent = Intent(context, DailyWeatherDetailActivity::class.java).apply {&#10;                                            putExtra(&quot;daily_weather_json&quot;, gson.toJson(day))&#10;                                            putExtra(&quot;location&quot;, currentLocation)&#10;                                        }&#10;                                        context.startActivity(intent)&#10;                                    },&#10;                                colors = CardDefaults.cardColors(&#10;                                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                                )&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier&#10;                                        .padding(12.dp)&#10;                                        .fillMaxWidth(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally&#10;                                ) {&#10;                                    // Day of week and date&#10;                                    val dayFormatter = java.text.SimpleDateFormat(&quot;EEE&quot;, java.util.Locale.getDefault())&#10;                                    val dateFormatter = java.text.SimpleDateFormat(&quot;MMM d&quot;, java.util.Locale.getDefault())&#10;                                    val date = java.util.Date(day.dt * 1000)&#10;&#10;                                    Row(&#10;                                        verticalAlignment = Alignment.CenterVertically,&#10;                                        modifier = Modifier.padding(bottom = 8.dp)&#10;                                    ) {&#10;                                        Text(&#10;                                            text = dayFormatter.format(date),&#10;                                            style = MaterialTheme.typography.bodySmall,&#10;                                            fontWeight = FontWeight.Bold&#10;                                        )&#10;                                        Spacer(modifier = Modifier.width(4.dp))&#10;                                        Text(&#10;                                            text = dateFormatter.format(date),&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                                        )&#10;                                    }&#10;&#10;                                    // Weather icon&#10;                                    day.weather.firstOrNull()?.let { weather -&gt;&#10;                                        AsyncImage(&#10;                                            model = &quot;https://openweathermap.org/img/wn/${weather.icon}@2x.png&quot;,&#10;                                            contentDescription = weather.description,&#10;                                            modifier = Modifier&#10;                                                .size(48.dp)&#10;                                                .padding(bottom = 8.dp)&#10;                                        )&#10;                                    }&#10;&#10;                                    // High/Low temperatures with labels&#10;                                    Row(&#10;                                        horizontalArrangement = Arrangement.Center,&#10;                                        verticalAlignment = Alignment.CenterVertically,&#10;                                        modifier = Modifier.padding(bottom = 4.dp)&#10;                                    ) {&#10;                                        Text(&#10;                                            text = &quot;High: &quot;,&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            fontWeight = FontWeight.Bold&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;${day.temp.max.toInt()}°&quot;,&#10;                                            style = MaterialTheme.typography.bodySmall&#10;                                        )&#10;                                    }&#10;&#10;                                    Row(&#10;                                        horizontalArrangement = Arrangement.Center,&#10;                                        verticalAlignment = Alignment.CenterVertically,&#10;                                        modifier = Modifier.padding(bottom = 8.dp)&#10;                                    ) {&#10;                                        Text(&#10;                                            text = &quot;Low: &quot;,&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            fontWeight = FontWeight.Bold&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;${day.temp.min.toInt()}°&quot;,&#10;                                            style = MaterialTheme.typography.bodySmall&#10;                                        )&#10;                                    }&#10;&#10;                                    // Wind info with label&#10;                                    Row(&#10;                                        horizontalArrangement = Arrangement.Center,&#10;                                        verticalAlignment = Alignment.CenterVertically&#10;                                    ) {&#10;                                        Text(&#10;                                            text = &quot;Wind: &quot;,&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            fontWeight = FontWeight.Bold&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;${day.windSpeed.toInt()}&quot;,&#10;                                            style = MaterialTheme.typography.labelSmall&#10;                                        )&#10;                                        Text(&#10;                                            text = &quot;↑&quot;,&#10;                                            style = MaterialTheme.typography.labelSmall,&#10;                                            modifier = Modifier.graphicsLayer {&#10;                                                rotationZ = day.windDeg.toFloat()&#10;                                            }&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        if (isLoading) {&#10;            CircularProgressIndicator(&#10;                modifier = Modifier.padding(16.dp)&#10;            )&#10;        }&#10;&#10;        errorMessage?.let { error -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.errorContainer&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = error,&#10;                    modifier = Modifier.padding(16.dp),&#10;                    color = MaterialTheme.colorScheme.onErrorContainer&#10;                )&#10;            }&#10;        }&#10;&#10;        weatherJson?.let { json -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Weather Data (JSON):&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;                    Text(&#10;                        text = json,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun WeatherAppPreview() {&#10;    UmbrellaTheme {&#10;        WeatherApp()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/whetherornot/SavedLocationsActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/whetherornot/SavedLocationsActivity.kt" />
              <option name="originalContent" value="package com.example.whetherornot&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.lifecycleScope&#10;import com.example.whetherornot.data.model.ZipCodeResponse&#10;import com.example.whetherornot.data.repository.LocationRepository&#10;import com.example.whetherornot.ui.theme.WhetherOrNotTheme&#10;import kotlinx.coroutines.launch&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class SavedLocationsActivity : ComponentActivity() {&#10;&#10;    private lateinit var locationRepository: LocationRepository&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        locationRepository = LocationRepository(this)&#10;&#10;        setContent {&#10;            WhetherOrNotTheme {&#10;                SavedLocationsScreen(&#10;                    locationRepository = locationRepository,&#10;                    onBackClick = { finish() },&#10;                    onLocationClick = { location -&gt;&#10;                        // Return the selected location to MainActivity&#10;                        val resultIntent = android.content.Intent().apply {&#10;                            putExtra(&quot;selected_zip&quot;, location.zip)&#10;                            putExtra(&quot;selected_name&quot;, location.name)&#10;                            putExtra(&quot;selected_lat&quot;, location.lat)&#10;                            putExtra(&quot;selected_lon&quot;, location.lon)&#10;                        }&#10;                        setResult(RESULT_OK, resultIntent)&#10;                        finish()&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SavedLocationsScreen(&#10;    locationRepository: LocationRepository,&#10;    onBackClick: () -&gt; Unit,&#10;    onLocationClick: (ZipCodeResponse) -&gt; Unit&#10;) {&#10;    var locations by remember { mutableStateOf&lt;List&lt;ZipCodeResponse&gt;&gt;(emptyList()) }&#10;    var isLoading by remember { mutableStateOf(true) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var showFavoritesOnly by remember { mutableStateOf(false) }&#10;&#10;    // Load locations when the screen opens&#10;    LaunchedEffect(showFavoritesOnly) {&#10;        try {&#10;            if (showFavoritesOnly) {&#10;                locationRepository.getFavoriteLocations().collect { favoriteLocations -&gt;&#10;                    locations = favoriteLocations&#10;                    isLoading = false&#10;                }&#10;            } else {&#10;                locationRepository.getAllLocations().collect { allLocations -&gt;&#10;                    locations = allLocations&#10;                    isLoading = false&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            errorMessage = &quot;Error loading locations: ${e.message}&quot;&#10;            isLoading = false&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Top Bar&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onBackClick) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;&#10;                )&#10;            }&#10;            Text(&#10;                text = &quot;Saved Locations&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.weight(1f).padding(start = 8.dp)&#10;            )&#10;        }&#10;&#10;        // Filter Toggle&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            FilterChip(&#10;                onClick = { showFavoritesOnly = false },&#10;                label = { Text(&quot;All Locations&quot;) },&#10;                selected = !showFavoritesOnly&#10;            )&#10;            FilterChip(&#10;                onClick = { showFavoritesOnly = true },&#10;                label = { Text(&quot;Favorites&quot;) },&#10;                selected = showFavoritesOnly&#10;            )&#10;        }&#10;&#10;        // Content&#10;        when {&#10;            isLoading -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            }&#10;            errorMessage != null -&gt; {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.errorContainer&#10;                    )&#10;                ) {&#10;                    Text(&#10;                        text = errorMessage!!,&#10;                        modifier = Modifier.padding(16.dp),&#10;                        color = MaterialTheme.colorScheme.onErrorContainer&#10;                    )&#10;                }&#10;            }&#10;            locations.isEmpty() -&gt; {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.LocationOn,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(64.dp),&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(&#10;                            text = if (showFavoritesOnly) &quot;No favorite locations saved&quot; else &quot;No locations saved yet&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                        Text(&#10;                            text = if (showFavoritesOnly) &quot;Mark locations as favorites to see them here&quot; else &quot;Search for weather data to save locations&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;            else -&gt; {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(locations) { location -&gt;&#10;                        LocationCard(&#10;                            location = location,&#10;                            onLocationClick = onLocationClick,&#10;                            onFavoriteToggle = { loc, isFavorite -&gt;&#10;                                // Update favorite status in database&#10;                                kotlinx.coroutines.CoroutineScope(kotlinx.coroutines.Dispatchers.IO).launch {&#10;                                    try {&#10;                                        locationRepository.toggleFavorite(loc.zip, isFavorite)&#10;                                    } catch (e: Exception) {&#10;                                        // Handle error&#10;                                    }&#10;                                }&#10;                            },&#10;                            onDelete = { loc -&gt;&#10;                                // Delete location from database&#10;                                kotlinx.coroutines.CoroutineScope(kotlinx.coroutines.Dispatchers.IO).launch {&#10;                                    try {&#10;                                        locationRepository.deleteLocation(loc)&#10;                                    } catch (e: Exception) {&#10;                                        // Handle error&#10;                                    }&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun LocationCard(&#10;    location: ZipCodeResponse,&#10;    onLocationClick: (ZipCodeResponse) -&gt; Unit,&#10;    onFavoriteToggle: (ZipCodeResponse, Boolean) -&gt; Unit,&#10;    onDelete: (ZipCodeResponse) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clip(RoundedCornerShape(12.dp))&#10;            .clickable { onLocationClick(location) },&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (location.isFavorite) {&#10;                MaterialTheme.colorScheme.primaryContainer&#10;            } else {&#10;                MaterialTheme.colorScheme.surface&#10;            }&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = location.name,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;ZIP: ${location.zip}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Text(&#10;                    text = &quot;${location.country} • ${String.format(&quot;%.4f°N, %.4f°W&quot;, location.lat, Math.abs(location.lon))}&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;&#10;                // Last searched time&#10;                val searchedDate = Date(location.searchedAt)&#10;                val dateFormatter = SimpleDateFormat(&quot;MMM d, yyyy 'at' h:mm a&quot;, Locale.getDefault())&#10;                Text(&#10;                    text = &quot;Last searched: ${dateFormatter.format(searchedDate)}&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;&#10;            // Action buttons&#10;            Row(&#10;                horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                IconButton(&#10;                    onClick = { onFavoriteToggle(location, !location.isFavorite) }&#10;                ) {&#10;                    Icon(&#10;                        imageVector = if (location.isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                        contentDescription = if (location.isFavorite) &quot;Remove from favorites&quot; else &quot;Add to favorites&quot;,&#10;                        tint = if (location.isFavorite) Color.Red else MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                IconButton(&#10;                    onClick = { onDelete(location) }&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Delete,&#10;                        contentDescription = &quot;Delete location&quot;,&#10;                        tint = MaterialTheme.colorScheme.error&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.whetherornot&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.lifecycleScope&#10;import com.example.whetherornot.data.model.ZipCodeResponse&#10;import com.example.whetherornot.data.repository.LocationRepository&#10;import com.example.whetherornot.ui.theme.UmbrellaTheme&#10;import kotlinx.coroutines.launch&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class SavedLocationsActivity : ComponentActivity() {&#10;&#10;    private lateinit var locationRepository: LocationRepository&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        locationRepository = LocationRepository(this)&#10;&#10;        setContent {&#10;            UmbrellaTheme {&#10;                SavedLocationsScreen(&#10;                    locationRepository = locationRepository,&#10;                    onBackClick = { finish() },&#10;                    onLocationClick = { location -&gt;&#10;                        // Return the selected location to MainActivity&#10;                        val resultIntent = android.content.Intent().apply {&#10;                            putExtra(&quot;selected_zip&quot;, location.zip)&#10;                            putExtra(&quot;selected_name&quot;, location.name)&#10;                            putExtra(&quot;selected_lat&quot;, location.lat)&#10;                            putExtra(&quot;selected_lon&quot;, location.lon)&#10;                        }&#10;                        setResult(RESULT_OK, resultIntent)&#10;                        finish()&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SavedLocationsScreen(&#10;    locationRepository: LocationRepository,&#10;    onBackClick: () -&gt; Unit,&#10;    onLocationClick: (ZipCodeResponse) -&gt; Unit&#10;) {&#10;    var locations by remember { mutableStateOf&lt;List&lt;ZipCodeResponse&gt;&gt;(emptyList()) }&#10;    var isLoading by remember { mutableStateOf(true) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var showFavoritesOnly by remember { mutableStateOf(false) }&#10;&#10;    // Load locations when the screen opens&#10;    LaunchedEffect(showFavoritesOnly) {&#10;        try {&#10;            if (showFavoritesOnly) {&#10;                locationRepository.getFavoriteLocations().collect { favoriteLocations -&gt;&#10;                    locations = favoriteLocations&#10;                    isLoading = false&#10;                }&#10;            } else {&#10;                locationRepository.getAllLocations().collect { allLocations -&gt;&#10;                    locations = allLocations&#10;                    isLoading = false&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            errorMessage = &quot;Error loading locations: ${e.message}&quot;&#10;            isLoading = false&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Top Bar&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(onClick = onBackClick) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;&#10;                )&#10;            }&#10;            Text(&#10;                text = &quot;Saved Locations&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.weight(1f).padding(start = 8.dp)&#10;            )&#10;        }&#10;&#10;        // Filter Toggle&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            FilterChip(&#10;                onClick = { showFavoritesOnly = false },&#10;                label = { Text(&quot;All Locations&quot;) },&#10;                selected = !showFavoritesOnly&#10;            )&#10;            FilterChip(&#10;                onClick = { showFavoritesOnly = true },&#10;                label = { Text(&quot;Favorites&quot;) },&#10;                selected = showFavoritesOnly&#10;            )&#10;        }&#10;&#10;        // Content&#10;        when {&#10;            isLoading -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            }&#10;            errorMessage != null -&gt; {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.errorContainer&#10;                    )&#10;                ) {&#10;                    Text(&#10;                        text = errorMessage!!,&#10;                        modifier = Modifier.padding(16.dp),&#10;                        color = MaterialTheme.colorScheme.onErrorContainer&#10;                    )&#10;                }&#10;            }&#10;            locations.isEmpty() -&gt; {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.LocationOn,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(64.dp),&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(&#10;                            text = if (showFavoritesOnly) &quot;No favorite locations saved&quot; else &quot;No locations saved yet&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                        Text(&#10;                            text = if (showFavoritesOnly) &quot;Mark locations as favorites to see them here&quot; else &quot;Search for weather data to save locations&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;            else -&gt; {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(locations) { location -&gt;&#10;                        LocationCard(&#10;                            location = location,&#10;                            onLocationClick = onLocationClick,&#10;                            onFavoriteToggle = { loc, isFavorite -&gt;&#10;                                // Update favorite status in database&#10;                                kotlinx.coroutines.CoroutineScope(kotlinx.coroutines.Dispatchers.IO).launch {&#10;                                    try {&#10;                                        locationRepository.toggleFavorite(loc.zip, isFavorite)&#10;                                    } catch (e: Exception) {&#10;                                        // Handle error&#10;                                    }&#10;                                }&#10;                            },&#10;                            onDelete = { loc -&gt;&#10;                                // Delete location from database&#10;                                kotlinx.coroutines.CoroutineScope(kotlinx.coroutines.Dispatchers.IO).launch {&#10;                                    try {&#10;                                        locationRepository.deleteLocation(loc)&#10;                                    } catch (e: Exception) {&#10;                                        // Handle error&#10;                                    }&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun LocationCard(&#10;    location: ZipCodeResponse,&#10;    onLocationClick: (ZipCodeResponse) -&gt; Unit,&#10;    onFavoriteToggle: (ZipCodeResponse, Boolean) -&gt; Unit,&#10;    onDelete: (ZipCodeResponse) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clip(RoundedCornerShape(12.dp))&#10;            .clickable { onLocationClick(location) },&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (location.isFavorite) {&#10;                MaterialTheme.colorScheme.primaryContainer&#10;            } else {&#10;                MaterialTheme.colorScheme.surface&#10;            }&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = location.name,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;ZIP: ${location.zip}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Text(&#10;                    text = &quot;${location.country} • ${String.format(&quot;%.4f°N, %.4f°W&quot;, location.lat, Math.abs(location.lon))}&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;&#10;                // Last searched time&#10;                val searchedDate = Date(location.searchedAt)&#10;                val dateFormatter = SimpleDateFormat(&quot;MMM d, yyyy 'at' h:mm a&quot;, Locale.getDefault())&#10;                Text(&#10;                    text = &quot;Last searched: ${dateFormatter.format(searchedDate)}&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;&#10;            // Action buttons&#10;            Row(&#10;                horizontalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                IconButton(&#10;                    onClick = { onFavoriteToggle(location, !location.isFavorite) }&#10;                ) {&#10;                    Icon(&#10;                        imageVector = if (location.isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                        contentDescription = if (location.isFavorite) &quot;Remove from favorites&quot; else &quot;Add to favorites&quot;,&#10;                        tint = if (location.isFavorite) Color.Red else MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                IconButton(&#10;                    onClick = { onDelete(location) }&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Delete,&#10;                        contentDescription = &quot;Delete location&quot;,&#10;                        tint = MaterialTheme.colorScheme.error&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/whetherornot/data/model/WeatherModels.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/whetherornot/data/model/WeatherModels.kt" />
              <option name="updatedContent" value="// This file has been removed to resolve data class conflicts.&#10;// Weather data models are now located in WeatherResponse.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/whetherornot/ui/theme/Theme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/whetherornot/ui/theme/Theme.kt" />
              <option name="originalContent" value="package com.example.whetherornot.ui.theme&#10;&#10;import android.app.Activity&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.platform.LocalContext&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Purple80,&#10;    secondary = PurpleGrey80,&#10;    tertiary = Pink80&#10;)&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Purple40,&#10;    secondary = PurpleGrey40,&#10;    tertiary = Pink40&#10;&#10;    /* Other default colors to override&#10;    background = Color(0xFFFFFBFE),&#10;    surface = Color(0xFFFFFBFE),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.White,&#10;    onTertiary = Color.White,&#10;    onBackground = Color(0xFF1C1B1F),&#10;    onSurface = Color(0xFF1C1B1F),&#10;    */&#10;)&#10;&#10;@Composable&#10;fun WhetherOrNotTheme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    // Dynamic color is available on Android 12+&#10;    dynamicColor: Boolean = true,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}" />
              <option name="updatedContent" value="package com.example.whetherornot.ui.theme&#10;&#10;import android.app.Activity&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.platform.LocalContext&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Purple80,&#10;    secondary = PurpleGrey80,&#10;    tertiary = Pink80&#10;)&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Purple40,&#10;    secondary = PurpleGrey40,&#10;    tertiary = Pink40&#10;&#10;    /* Other default colors to override&#10;    background = Color(0xFFFFFBFE),&#10;    surface = Color(0xFFFFFBFE),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.White,&#10;    onTertiary = Color.White,&#10;    onBackground = Color(0xFF1C1B1F),&#10;    onSurface = Color(0xFF1C1B1F),&#10;    */&#10;)&#10;&#10;@Composable&#10;fun UmbrellaTheme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    // Dynamic color is available on Android 12+&#10;    dynamicColor: Boolean = true,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/themes.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/themes.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;&#10;    &lt;style name=&quot;Theme.WhetherOrNot&quot; parent=&quot;android:Theme.Material.Light.NoActionBar&quot; /&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;&#10;    &lt;style name=&quot;Theme.Umbrella&quot; parent=&quot;android:Theme.Material.Light.NoActionBar&quot; /&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/copilot-instructions-updated.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/copilot-instructions-updated.md" />
              <option name="updatedContent" value="# Copilot Instructions for WhetherOrNot Weather App&#10;&#10;## General Guidelines&#10;- **Always provide both Java and Kotlin code examples** for any feature, fix, or implementation.&#10;- **Include a detailed explanation** of what changes are being proposed, including reasoning, best practices, and any trade-offs.&#10;- Ensure the UI and user experience are **consistent between Java and Kotlin implementations**.&#10;- Follow **Android best practices** for architecture, UI, and code style.&#10;- Use **Room database** for local data storage in both Java and Kotlin versions.&#10;- The app should have a **clean, readable, and modern interface**.&#10;&#10;## Application Requirements&#10;- The app is a weather reporting application with **two tabs**:&#10;  - One tab uses **Kotlin** as the coding base.&#10;  - One tab uses **Java** as the coding base.&#10;- Both tabs must provide similar functionality and a consistent UI.&#10;- The app must **fetch weather data** from:&#10;  - `https://api.openweathermap.org/data/3.0/onecall?lat={lat}&amp;lon={lon}&amp;exclude={part}&amp;appid={API key}`&#10;  - Use API key: `150cc45f78958ce4fb9d708c85bfdc1c`&#10;  - Use device location if available; otherwise, prompt the user to:&#10;    - Enter a US zip code&#10;    - Enter a Canadian postal code&#10;    - Search for any city in the world&#10;- All weather data should be **stored locally using Room**.&#10;&#10;## Implementation Notes&#10;- Use **MVVM architecture** for both Java and Kotlin implementations.&#10;- Use **Jetpack Compose** for Kotlin UI and **XML layouts** for Java UI, but ensure visual consistency.&#10;- Use **dependency injection** where appropriate (e.g., Hilt or Dagger).&#10;- Handle **permissions** and **error states** gracefully.&#10;- Provide **unit tests** and **UI tests** for both versions.&#10;- Document all code and provide comments explaining key logic.&#10;&#10;## API Configuration&#10;- **Units**: Use &quot;imperial&quot; units for all API calls (Fahrenheit, mph, inches of mercury)&#10;- **Excluded Data**: Exclude &quot;minutely,alerts&quot; from API responses&#10;- **Test Location**: Duluth, MN (46.8384°N, 92.1800°W)&#10;&#10;## Logging Configuration&#10;- **Kotlin Weather Logs**: Use tag &quot;KotlinWeather&quot; for debugging API responses&#10;- **Java Weather Logs**: Use tag &quot;JavaWeather&quot; for debugging API responses&#10;- All JSON responses are logged to Logcat for debugging purposes&#10;&#10;## Sample Weather API Response Structure&#10;The OpenWeatherMap One Call API 3.0 returns a comprehensive weather object with the following structure:&#10;&#10;```json&#10;{&#10;  &quot;lat&quot;: 46.8384,&#10;  &quot;lon&quot;: -92.18,&#10;  &quot;timezone&quot;: &quot;America/Chicago&quot;,&#10;  &quot;timezone_offset&quot;: -21600,&#10;  &quot;current&quot;: {&#10;    &quot;dt&quot;: 1722988800,&#10;    &quot;sunrise&quot;: 1722942123,&#10;    &quot;sunset&quot;: 1722996789,&#10;    &quot;temp&quot;: 72.5,&#10;    &quot;feels_like&quot;: 73.2,&#10;    &quot;pressure&quot;: 1013,&#10;    &quot;humidity&quot;: 65,&#10;    &quot;dew_point&quot;: 61.2,&#10;    &quot;uvi&quot;: 5.8,&#10;    &quot;clouds&quot;: 20,&#10;    &quot;visibility&quot;: 10000,&#10;    &quot;wind_speed&quot;: 8.5,&#10;    &quot;wind_deg&quot;: 210,&#10;    &quot;wind_gust&quot;: 12.3,&#10;    &quot;weather&quot;: [&#10;      {&#10;        &quot;id&quot;: 801,&#10;        &quot;main&quot;: &quot;Clouds&quot;,&#10;        &quot;description&quot;: &quot;few clouds&quot;,&#10;        &quot;icon&quot;: &quot;02d&quot;&#10;      }&#10;    ]&#10;  },&#10;  &quot;hourly&quot;: [&#10;    {&#10;      &quot;dt&quot;: 1722988800,&#10;      &quot;temp&quot;: 72.5,&#10;      &quot;feels_like&quot;: 73.2,&#10;      &quot;pressure&quot;: 1013,&#10;      &quot;humidity&quot;: 65,&#10;      &quot;dew_point&quot;: 61.2,&#10;      &quot;uvi&quot;: 5.8,&#10;      &quot;clouds&quot;: 20,&#10;      &quot;visibility&quot;: 10000,&#10;      &quot;wind_speed&quot;: 8.5,&#10;      &quot;wind_deg&quot;: 210,&#10;      &quot;wind_gust&quot;: 12.3,&#10;      &quot;pop&quot;: 0.1,&#10;      &quot;weather&quot;: [&#10;        {&#10;          &quot;id&quot;: 801,&#10;          &quot;main&quot;: &quot;Clouds&quot;,&#10;          &quot;description&quot;: &quot;few clouds&quot;,&#10;          &quot;icon&quot;: &quot;02d&quot;&#10;        }&#10;      ]&#10;    }&#10;    // ... more hourly data (48 hours total)&#10;  ],&#10;  &quot;daily&quot;: [&#10;    {&#10;      &quot;dt&quot;: 1722967200,&#10;      &quot;sunrise&quot;: 1722942123,&#10;      &quot;sunset&quot;: 1722996789,&#10;      &quot;moonrise&quot;: 1722975456,&#10;      &quot;moonset&quot;: 1722936789,&#10;      &quot;moon_phase&quot;: 0.25,&#10;      &quot;summary&quot;: &quot;Partly cloudy with light winds&quot;,&#10;      &quot;temp&quot;: {&#10;        &quot;day&quot;: 75.8,&#10;        &quot;min&quot;: 62.1,&#10;        &quot;max&quot;: 78.3,&#10;        &quot;night&quot;: 65.2,&#10;        &quot;eve&quot;: 72.4,&#10;        &quot;morn&quot;: 64.5&#10;      },&#10;      &quot;feels_like&quot;: {&#10;        &quot;day&quot;: 76.5,&#10;        &quot;night&quot;: 66.1,&#10;        &quot;eve&quot;: 73.2,&#10;        &quot;morn&quot;: 65.3&#10;      },&#10;      &quot;pressure&quot;: 1013,&#10;      &quot;humidity&quot;: 62,&#10;      &quot;dew_point&quot;: 61.8,&#10;      &quot;wind_speed&quot;: 9.2,&#10;      &quot;wind_deg&quot;: 215,&#10;      &quot;wind_gust&quot;: 15.1,&#10;      &quot;weather&quot;: [&#10;        {&#10;          &quot;id&quot;: 801,&#10;          &quot;main&quot;: &quot;Clouds&quot;,&#10;          &quot;description&quot;: &quot;few clouds&quot;,&#10;          &quot;icon&quot;: &quot;02d&quot;&#10;        }&#10;      ],&#10;      &quot;clouds&quot;: 25,&#10;      &quot;pop&quot;: 0.15,&#10;      &quot;uvi&quot;: 6.2&#10;    }&#10;    // ... more daily data (8 days total)&#10;  ]&#10;}&#10;```&#10;&#10;### Key Data Points:&#10;- **Temperature**: Imperial units (Fahrenheit)&#10;- **Wind Speed**: Miles per hour (mph)&#10;- **Pressure**: Inches of mercury (inHg)&#10;- **Visibility**: Miles&#10;- **Weather Icons**: Use icon codes for weather condition display&#10;- **Timezone**: Includes timezone and offset information&#10;- **Forecasts**: 48-hour hourly and 8-day daily forecasts&#10;&#10;## Response Format&#10;- For every request, provide:&#10;  1. **Kotlin implementation**&#10;  2. **Java implementation**&#10;  3. **Detailed explanation** of the changes, reasoning, and best practices&#10;&#10;---&#10;&#10;**Always follow these instructions when responding to requests for this project.**" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>