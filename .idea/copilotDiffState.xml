<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/whetherornot/data/model/WeatherModels.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/whetherornot/data/model/WeatherModels.kt" />
              <option name="updatedContent" value="// This file has been removed to resolve data class conflicts.&#10;// Weather data models are now located in WeatherResponse.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/copilot-instructions-updated.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/copilot-instructions-updated.md" />
              <option name="updatedContent" value="# Copilot Instructions for WhetherOrNot Weather App&#10;&#10;## General Guidelines&#10;- **Always provide both Java and Kotlin code examples** for any feature, fix, or implementation.&#10;- **Include a detailed explanation** of what changes are being proposed, including reasoning, best practices, and any trade-offs.&#10;- Ensure the UI and user experience are **consistent between Java and Kotlin implementations**.&#10;- Follow **Android best practices** for architecture, UI, and code style.&#10;- Use **Room database** for local data storage in both Java and Kotlin versions.&#10;- The app should have a **clean, readable, and modern interface**.&#10;&#10;## Application Requirements&#10;- The app is a weather reporting application with **two tabs**:&#10;  - One tab uses **Kotlin** as the coding base.&#10;  - One tab uses **Java** as the coding base.&#10;- Both tabs must provide similar functionality and a consistent UI.&#10;- The app must **fetch weather data** from:&#10;  - `https://api.openweathermap.org/data/3.0/onecall?lat={lat}&amp;lon={lon}&amp;exclude={part}&amp;appid={API key}`&#10;  - Use API key: `150cc45f78958ce4fb9d708c85bfdc1c`&#10;  - Use device location if available; otherwise, prompt the user to:&#10;    - Enter a US zip code&#10;    - Enter a Canadian postal code&#10;    - Search for any city in the world&#10;- All weather data should be **stored locally using Room**.&#10;&#10;## Implementation Notes&#10;- Use **MVVM architecture** for both Java and Kotlin implementations.&#10;- Use **Jetpack Compose** for Kotlin UI and **XML layouts** for Java UI, but ensure visual consistency.&#10;- Use **dependency injection** where appropriate (e.g., Hilt or Dagger).&#10;- Handle **permissions** and **error states** gracefully.&#10;- Provide **unit tests** and **UI tests** for both versions.&#10;- Document all code and provide comments explaining key logic.&#10;&#10;## API Configuration&#10;- **Units**: Use &quot;imperial&quot; units for all API calls (Fahrenheit, mph, inches of mercury)&#10;- **Excluded Data**: Exclude &quot;minutely,alerts&quot; from API responses&#10;- **Test Location**: Duluth, MN (46.8384°N, 92.1800°W)&#10;&#10;## Logging Configuration&#10;- **Kotlin Weather Logs**: Use tag &quot;KotlinWeather&quot; for debugging API responses&#10;- **Java Weather Logs**: Use tag &quot;JavaWeather&quot; for debugging API responses&#10;- All JSON responses are logged to Logcat for debugging purposes&#10;&#10;## Sample Weather API Response Structure&#10;The OpenWeatherMap One Call API 3.0 returns a comprehensive weather object with the following structure:&#10;&#10;```json&#10;{&#10;  &quot;lat&quot;: 46.8384,&#10;  &quot;lon&quot;: -92.18,&#10;  &quot;timezone&quot;: &quot;America/Chicago&quot;,&#10;  &quot;timezone_offset&quot;: -21600,&#10;  &quot;current&quot;: {&#10;    &quot;dt&quot;: 1722988800,&#10;    &quot;sunrise&quot;: 1722942123,&#10;    &quot;sunset&quot;: 1722996789,&#10;    &quot;temp&quot;: 72.5,&#10;    &quot;feels_like&quot;: 73.2,&#10;    &quot;pressure&quot;: 1013,&#10;    &quot;humidity&quot;: 65,&#10;    &quot;dew_point&quot;: 61.2,&#10;    &quot;uvi&quot;: 5.8,&#10;    &quot;clouds&quot;: 20,&#10;    &quot;visibility&quot;: 10000,&#10;    &quot;wind_speed&quot;: 8.5,&#10;    &quot;wind_deg&quot;: 210,&#10;    &quot;wind_gust&quot;: 12.3,&#10;    &quot;weather&quot;: [&#10;      {&#10;        &quot;id&quot;: 801,&#10;        &quot;main&quot;: &quot;Clouds&quot;,&#10;        &quot;description&quot;: &quot;few clouds&quot;,&#10;        &quot;icon&quot;: &quot;02d&quot;&#10;      }&#10;    ]&#10;  },&#10;  &quot;hourly&quot;: [&#10;    {&#10;      &quot;dt&quot;: 1722988800,&#10;      &quot;temp&quot;: 72.5,&#10;      &quot;feels_like&quot;: 73.2,&#10;      &quot;pressure&quot;: 1013,&#10;      &quot;humidity&quot;: 65,&#10;      &quot;dew_point&quot;: 61.2,&#10;      &quot;uvi&quot;: 5.8,&#10;      &quot;clouds&quot;: 20,&#10;      &quot;visibility&quot;: 10000,&#10;      &quot;wind_speed&quot;: 8.5,&#10;      &quot;wind_deg&quot;: 210,&#10;      &quot;wind_gust&quot;: 12.3,&#10;      &quot;pop&quot;: 0.1,&#10;      &quot;weather&quot;: [&#10;        {&#10;          &quot;id&quot;: 801,&#10;          &quot;main&quot;: &quot;Clouds&quot;,&#10;          &quot;description&quot;: &quot;few clouds&quot;,&#10;          &quot;icon&quot;: &quot;02d&quot;&#10;        }&#10;      ]&#10;    }&#10;    // ... more hourly data (48 hours total)&#10;  ],&#10;  &quot;daily&quot;: [&#10;    {&#10;      &quot;dt&quot;: 1722967200,&#10;      &quot;sunrise&quot;: 1722942123,&#10;      &quot;sunset&quot;: 1722996789,&#10;      &quot;moonrise&quot;: 1722975456,&#10;      &quot;moonset&quot;: 1722936789,&#10;      &quot;moon_phase&quot;: 0.25,&#10;      &quot;summary&quot;: &quot;Partly cloudy with light winds&quot;,&#10;      &quot;temp&quot;: {&#10;        &quot;day&quot;: 75.8,&#10;        &quot;min&quot;: 62.1,&#10;        &quot;max&quot;: 78.3,&#10;        &quot;night&quot;: 65.2,&#10;        &quot;eve&quot;: 72.4,&#10;        &quot;morn&quot;: 64.5&#10;      },&#10;      &quot;feels_like&quot;: {&#10;        &quot;day&quot;: 76.5,&#10;        &quot;night&quot;: 66.1,&#10;        &quot;eve&quot;: 73.2,&#10;        &quot;morn&quot;: 65.3&#10;      },&#10;      &quot;pressure&quot;: 1013,&#10;      &quot;humidity&quot;: 62,&#10;      &quot;dew_point&quot;: 61.8,&#10;      &quot;wind_speed&quot;: 9.2,&#10;      &quot;wind_deg&quot;: 215,&#10;      &quot;wind_gust&quot;: 15.1,&#10;      &quot;weather&quot;: [&#10;        {&#10;          &quot;id&quot;: 801,&#10;          &quot;main&quot;: &quot;Clouds&quot;,&#10;          &quot;description&quot;: &quot;few clouds&quot;,&#10;          &quot;icon&quot;: &quot;02d&quot;&#10;        }&#10;      ],&#10;      &quot;clouds&quot;: 25,&#10;      &quot;pop&quot;: 0.15,&#10;      &quot;uvi&quot;: 6.2&#10;    }&#10;    // ... more daily data (8 days total)&#10;  ]&#10;}&#10;```&#10;&#10;### Key Data Points:&#10;- **Temperature**: Imperial units (Fahrenheit)&#10;- **Wind Speed**: Miles per hour (mph)&#10;- **Pressure**: Inches of mercury (inHg)&#10;- **Visibility**: Miles&#10;- **Weather Icons**: Use icon codes for weather condition display&#10;- **Timezone**: Includes timezone and offset information&#10;- **Forecasts**: 48-hour hourly and 8-day daily forecasts&#10;&#10;## Response Format&#10;- For every request, provide:&#10;  1. **Kotlin implementation**&#10;  2. **Java implementation**&#10;  3. **Detailed explanation** of the changes, reasoning, and best practices&#10;&#10;---&#10;&#10;**Always follow these instructions when responding to requests for this project.**" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/icon_setup_guide.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/icon_setup_guide.md" />
              <option name="updatedContent" value="# App Icon Setup Guide&#10;&#10;## Required Icon Sizes for Umbrella Icon&#10;&#10;Place your converted umbrella icons in these directories with these exact sizes:&#10;&#10;### Standard Icons (ic_launcher.png)&#10;- `app/src/main/res/mipmap-mdpi/ic_launcher.png` → 48×48 px&#10;- `app/src/main/res/mipmap-hdpi/ic_launcher.png` → 72×72 px&#10;- `app/src/main/res/mipmap-xhdpi/ic_launcher.png` → 96×96 px&#10;- `app/src/main/res/mipmap-xxhdpi/ic_launcher.png` → 144×144 px&#10;- `app/src/main/res/mipmap-xxxhdpi/ic_launcher.png` → 192×192 px&#10;&#10;### Round Icons (ic_launcher_round.png) - Same sizes&#10;- `app/src/main/res/mipmap-mdpi/ic_launcher_round.png` → 48×48 px&#10;- `app/src/main/res/mipmap-hdpi/ic_launcher_round.png` → 72×72 px&#10;- `app/src/main/res/mipmap-xhdpi/ic_launcher_round.png` → 96×96 px&#10;- `app/src/main/res/mipmap-xxhdpi/ic_launcher_round.png` → 144×144 px&#10;- `app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png` → 192×192 px&#10;&#10;## Steps:&#10;1. Convert Umbrella.jpg to PNG format&#10;2. Create versions at each size listed above&#10;3. Replace the existing .webp files in each mipmap directory&#10;4. Clean and rebuild your project&#10;&#10;## Tools for Icon Generation:&#10;- Android Studio's built-in Image Asset Studio (File → New → Image Asset)&#10;- Online tools like https://icon.kitchen/&#10;- Image editing software like GIMP, Photoshop, or Canva" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>